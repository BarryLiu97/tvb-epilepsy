// Code generated by Stan version 2.17.1

#include <stan/model/model_header.hpp>

namespace vep_sde_simple_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "/Users/dionperd/VEPtools/software/git/tvb-epilepsy/tvb_epilepsy/service/model_inversion/stan/models/vep_sde_simple.stan");
    reader.add_event(222, 222, "end", "/Users/dionperd/VEPtools/software/git/tvb-epilepsy/tvb_epilepsy/service/model_inversion/stan/models/vep_sde_simple.stan");
    return reader;
}

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,Eigen::Dynamic>
vector_differencing(const Eigen::Matrix<T0__, 1,Eigen::Dynamic>& x1, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 4;
        validate_non_negative_index("D", "num_elements(x1)", num_elements(x1));
        validate_non_negative_index("D", "num_elements(x1)", num_elements(x1));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  D(static_cast<Eigen::VectorXd::Index>(num_elements(x1)),static_cast<Eigen::VectorXd::Index>(num_elements(x1)));
        (void) D;  // dummy to suppress unused var warning

        stan::math::initialize(D, DUMMY_VAR__);
        stan::math::fill(D,DUMMY_VAR__);


        current_statement_begin__ = 5;
        for (int i = 1; i <= num_elements(x1); ++i) {

            current_statement_begin__ = 6;
            stan::math::assign(get_base1_lhs(D,i,"D",1), subtract(x1,get_base1(x1,i,"x1",1)));
        }
        current_statement_begin__ = 8;
        return stan::math::promote_scalar<fun_return_scalar_t__>(D);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct vector_differencing_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, 1,Eigen::Dynamic>& x1, std::ostream* pstream__) const {
        return vector_differencing(x1, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, 1,Eigen::Dynamic>
x1_step(const Eigen::Matrix<T0__, 1,Eigen::Dynamic>& x1,
            const Eigen::Matrix<T1__, 1,Eigen::Dynamic>& z,
            const T2__& Iext1,
            const T3__& tau1, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 12;
        int n_active_regions(0);
        (void) n_active_regions;  // dummy to suppress unused var warning

        stan::math::fill(n_active_regions, std::numeric_limits<int>::min());
        stan::math::assign(n_active_regions,num_elements(x1));
        current_statement_begin__ = 13;
        validate_non_negative_index("x1_next", "n_active_regions", n_active_regions);
        Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  x1_next(static_cast<Eigen::VectorXd::Index>(n_active_regions));
        (void) x1_next;  // dummy to suppress unused var warning

        stan::math::initialize(x1_next, DUMMY_VAR__);
        stan::math::fill(x1_next,DUMMY_VAR__);
        current_statement_begin__ = 14;
        validate_non_negative_index("Iext1_vec", "n_active_regions", n_active_regions);
        Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  Iext1_vec(static_cast<Eigen::VectorXd::Index>(n_active_regions));
        (void) Iext1_vec;  // dummy to suppress unused var warning

        stan::math::initialize(Iext1_vec, DUMMY_VAR__);
        stan::math::fill(Iext1_vec,DUMMY_VAR__);
        stan::math::assign(Iext1_vec,rep_row_vector((Iext1 + 1.0),n_active_regions));
        current_statement_begin__ = 15;
        validate_non_negative_index("dx1", "n_active_regions", n_active_regions);
        Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  dx1(static_cast<Eigen::VectorXd::Index>(n_active_regions));
        (void) dx1;  // dummy to suppress unused var warning

        stan::math::initialize(dx1, DUMMY_VAR__);
        stan::math::fill(dx1,DUMMY_VAR__);
        stan::math::assign(dx1,subtract(subtract(subtract(Iext1_vec,elt_multiply(elt_multiply(x1,x1),x1)),multiply(2.0,elt_multiply(x1,x1))),z));


        current_statement_begin__ = 16;
        stan::math::assign(x1_next, add(x1,multiply(tau1,dx1)));
        current_statement_begin__ = 17;
        return stan::math::promote_scalar<fun_return_scalar_t__>(x1_next);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct x1_step_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, 1,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, 1,Eigen::Dynamic>& x1,
            const Eigen::Matrix<T1__, 1,Eigen::Dynamic>& z,
            const T2__& Iext1,
            const T3__& tau1, std::ostream* pstream__) const {
        return x1_step(x1, z, Iext1, tau1, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__>::type>::type>::type, 1,Eigen::Dynamic>
z_step(const Eigen::Matrix<T0__, 1,Eigen::Dynamic>& x1,
           const Eigen::Matrix<T1__, 1,Eigen::Dynamic>& z,
           const Eigen::Matrix<T2__, 1,Eigen::Dynamic>& x0,
           const Eigen::Matrix<T3__, Eigen::Dynamic,Eigen::Dynamic>& FC,
           const Eigen::Matrix<T4__, Eigen::Dynamic,1>& Ic,
           const T5__& x1_eq_def,
           const T6__& tau1,
           const Eigen::Matrix<T7__, 1,Eigen::Dynamic>& dZt,
           const T8__& sigma,
           const T9__& tau0, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 22;
        int n_active_regions(0);
        (void) n_active_regions;  // dummy to suppress unused var warning

        stan::math::fill(n_active_regions, std::numeric_limits<int>::min());
        stan::math::assign(n_active_regions,num_elements(z));
        current_statement_begin__ = 23;
        validate_non_negative_index("z_next", "n_active_regions", n_active_regions);
        Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  z_next(static_cast<Eigen::VectorXd::Index>(n_active_regions));
        (void) z_next;  // dummy to suppress unused var warning

        stan::math::initialize(z_next, DUMMY_VAR__);
        stan::math::fill(z_next,DUMMY_VAR__);
        current_statement_begin__ = 24;
        validate_non_negative_index("D", "n_active_regions", n_active_regions);
        validate_non_negative_index("D", "n_active_regions", n_active_regions);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  D(static_cast<Eigen::VectorXd::Index>(n_active_regions),static_cast<Eigen::VectorXd::Index>(n_active_regions));
        (void) D;  // dummy to suppress unused var warning

        stan::math::initialize(D, DUMMY_VAR__);
        stan::math::fill(D,DUMMY_VAR__);
        stan::math::assign(D,vector_differencing(x1, pstream__));
        current_statement_begin__ = 27;
        validate_non_negative_index("gx", "n_active_regions", n_active_regions);
        Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  gx(static_cast<Eigen::VectorXd::Index>(n_active_regions));
        (void) gx;  // dummy to suppress unused var warning

        stan::math::initialize(gx, DUMMY_VAR__);
        stan::math::fill(gx,DUMMY_VAR__);
        stan::math::assign(gx,to_row_vector(add(rows_dot_product(FC,D),elt_multiply(Ic,to_vector(subtract(x1_eq_def,x1))))));
        current_statement_begin__ = 28;
        validate_non_negative_index("dz", "n_active_regions", n_active_regions);
        Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  dz(static_cast<Eigen::VectorXd::Index>(n_active_regions));
        (void) dz;  // dummy to suppress unused var warning

        stan::math::initialize(dz, DUMMY_VAR__);
        stan::math::fill(dz,DUMMY_VAR__);
        stan::math::assign(dz,multiply(inv(tau0),subtract(subtract(multiply(4,subtract(x1,x0)),z),gx)));


        current_statement_begin__ = 29;
        stan::math::assign(z_next, add(add(z,multiply(tau1,dz)),multiply(dZt,sigma)));
        current_statement_begin__ = 30;
        return stan::math::promote_scalar<fun_return_scalar_t__>(z_next);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct z_step_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__>::type>::type>::type, 1,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, 1,Eigen::Dynamic>& x1,
           const Eigen::Matrix<T1__, 1,Eigen::Dynamic>& z,
           const Eigen::Matrix<T2__, 1,Eigen::Dynamic>& x0,
           const Eigen::Matrix<T3__, Eigen::Dynamic,Eigen::Dynamic>& FC,
           const Eigen::Matrix<T4__, Eigen::Dynamic,1>& Ic,
           const T5__& x1_eq_def,
           const T6__& tau1,
           const Eigen::Matrix<T7__, 1,Eigen::Dynamic>& dZt,
           const T8__& sigma,
           const T9__& tau0, std::ostream* pstream__) const {
        return z_step(x1, z, x0, FC, Ic, x1_eq_def, tau1, dZt, sigma, tau0, pstream__);
    }
};

template <typename T0__, typename T1__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__>::type>
normal_mean_std_to_lognorm_mu_sigma(const T0__& mean_,
                                        const T1__& std_, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 34;
        validate_non_negative_index("mu_sigma", "2", 2);
        vector<local_scalar_t__> mu_sigma(2);
        stan::math::initialize(mu_sigma, DUMMY_VAR__);
        stan::math::fill(mu_sigma,DUMMY_VAR__);
        current_statement_begin__ = 35;
        local_scalar_t__ logsm21;
        (void) logsm21;  // dummy to suppress unused var warning

        stan::math::initialize(logsm21, DUMMY_VAR__);
        stan::math::fill(logsm21,DUMMY_VAR__);
        stan::math::assign(logsm21,(std_ / mean_));


        current_statement_begin__ = 36;
        stan::math::assign(logsm21, stan::math::log(((logsm21 * logsm21) + 1.0)));
        current_statement_begin__ = 37;
        stan::math::assign(get_base1_lhs(mu_sigma,1,"mu_sigma",1), (stan::math::log(mean_) - (0.5 * logsm21)));
        current_statement_begin__ = 38;
        stan::math::assign(get_base1_lhs(mu_sigma,2,"mu_sigma",1), stan::math::sqrt(logsm21));
        current_statement_begin__ = 39;
        return stan::math::promote_scalar<fun_return_scalar_t__>(mu_sigma);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct normal_mean_std_to_lognorm_mu_sigma_functor__ {
    template <typename T0__, typename T1__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__>::type>
    operator()(const T0__& mean_,
                                        const T1__& std_, std::ostream* pstream__) const {
        return normal_mean_std_to_lognorm_mu_sigma(mean_, std_, pstream__);
    }
};

template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, 1,Eigen::Dynamic>
normal_mean_std_to_lognorm_mu(const Eigen::Matrix<T0__, 1,Eigen::Dynamic>& mean_,
                                  const Eigen::Matrix<T1__, 1,Eigen::Dynamic>& std_, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 43;
        int n_active_regions(0);
        (void) n_active_regions;  // dummy to suppress unused var warning

        stan::math::fill(n_active_regions, std::numeric_limits<int>::min());
        stan::math::assign(n_active_regions,num_elements(mean_));
        current_statement_begin__ = 44;
        validate_non_negative_index("logsm21", "n_active_regions", n_active_regions);
        Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  logsm21(static_cast<Eigen::VectorXd::Index>(n_active_regions));
        (void) logsm21;  // dummy to suppress unused var warning

        stan::math::initialize(logsm21, DUMMY_VAR__);
        stan::math::fill(logsm21,DUMMY_VAR__);
        stan::math::assign(logsm21,elt_divide(std_,mean_));


        current_statement_begin__ = 45;
        stan::math::assign(logsm21, stan::math::log(add(elt_multiply(logsm21,logsm21),1.0)));
        current_statement_begin__ = 46;
        return stan::math::promote_scalar<fun_return_scalar_t__>(subtract(stan::math::log(mean_),multiply(0.5,logsm21)));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct normal_mean_std_to_lognorm_mu_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, 1,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, 1,Eigen::Dynamic>& mean_,
                                  const Eigen::Matrix<T1__, 1,Eigen::Dynamic>& std_, std::ostream* pstream__) const {
        return normal_mean_std_to_lognorm_mu(mean_, std_, pstream__);
    }
};

template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, 1,Eigen::Dynamic>
normal_mean_std_to_lognorm_sigma(const Eigen::Matrix<T0__, 1,Eigen::Dynamic>& mean_,
                                     const Eigen::Matrix<T1__, 1,Eigen::Dynamic>& std_, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 50;
        int n_active_regions(0);
        (void) n_active_regions;  // dummy to suppress unused var warning

        stan::math::fill(n_active_regions, std::numeric_limits<int>::min());
        stan::math::assign(n_active_regions,num_elements(mean_));
        current_statement_begin__ = 51;
        validate_non_negative_index("logsm21", "n_active_regions", n_active_regions);
        Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  logsm21(static_cast<Eigen::VectorXd::Index>(n_active_regions));
        (void) logsm21;  // dummy to suppress unused var warning

        stan::math::initialize(logsm21, DUMMY_VAR__);
        stan::math::fill(logsm21,DUMMY_VAR__);
        stan::math::assign(logsm21,elt_divide(std_,mean_));


        current_statement_begin__ = 52;
        stan::math::assign(logsm21, stan::math::log(add(elt_multiply(logsm21,logsm21),1.0)));
        current_statement_begin__ = 53;
        return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::sqrt(logsm21));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct normal_mean_std_to_lognorm_sigma_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, 1,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, 1,Eigen::Dynamic>& mean_,
                                     const Eigen::Matrix<T1__, 1,Eigen::Dynamic>& std_, std::ostream* pstream__) const {
        return normal_mean_std_to_lognorm_sigma(mean_, std_, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
standard_normal_to_lognormal(const T0__& standard_normal,
                                 const T1__& mu,
                                 const T2__& sigma, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 57;
        return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::exp((mu + (sigma * standard_normal))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct standard_normal_to_lognormal_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& standard_normal,
                                 const T1__& mu,
                                 const T2__& sigma, std::ostream* pstream__) const {
        return standard_normal_to_lognormal(standard_normal, mu, sigma, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, 1,Eigen::Dynamic>
standard_normal_to_lognormal_row(const Eigen::Matrix<T0__, 1,Eigen::Dynamic>& standard_normal,
                                     const Eigen::Matrix<T1__, 1,Eigen::Dynamic>& mu,
                                     const Eigen::Matrix<T2__, 1,Eigen::Dynamic>& sigma, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 62;
        return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::exp(add(mu,elt_multiply(sigma,standard_normal))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct standard_normal_to_lognormal_row_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, 1,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, 1,Eigen::Dynamic>& standard_normal,
                                     const Eigen::Matrix<T1__, 1,Eigen::Dynamic>& mu,
                                     const Eigen::Matrix<T2__, 1,Eigen::Dynamic>& sigma, std::ostream* pstream__) const {
        return standard_normal_to_lognormal_row(standard_normal, mu, sigma, pstream__);
    }
};

class vep_sde_simple_model : public prob_grad {
private:
    int DEBUG;
    int SIMULATE;
    int n_active_regions;
    int n_times;
    int n_target_data;
    double Iext1;
    double tau0;
    double dt;
    double x0_hi;
    row_vector_d x0_star_mu;
    row_vector_d x0_star_std;
    double x1_eq_def;
    row_vector_d x1_init_mu;
    row_vector_d z_init_mu;
    double x1_init_std;
    double z_init_std;
    double tau1_mu;
    double tau1_std;
    double K_mu;
    double K_std;
    double sigma_mu;
    double sigma_std;
    double epsilon_mu;
    double epsilon_std;
    double offset_mu;
    double offset_std;
    double scale_mu;
    double scale_std;
    double scale_lo;
    int log_target_data;
    matrix_d gain;
    vector<row_vector_d> target_data;
    vector_d Ic;
    matrix_d SC;
    double sqrtdt;
    vector<double> scale_mu_sigma;
    vector<double> epsilon_mu_sigma;
    vector<double> tau1_mu_sigma;
    double K;
    vector<double> sigma_mu_sigma;
    row_vector_d x0_logmu;
    row_vector_d x0_sigma;
    matrix_d SC_;
public:
    vep_sde_simple_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    vep_sde_simple_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "vep_sde_simple_model_namespace::vep_sde_simple_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 67;
            context__.validate_dims("data initialization", "DEBUG", "int", context__.to_vec());
            DEBUG = int(0);
            vals_i__ = context__.vals_i("DEBUG");
            pos__ = 0;
            DEBUG = vals_i__[pos__++];
            current_statement_begin__ = 68;
            context__.validate_dims("data initialization", "SIMULATE", "int", context__.to_vec());
            SIMULATE = int(0);
            vals_i__ = context__.vals_i("SIMULATE");
            pos__ = 0;
            SIMULATE = vals_i__[pos__++];
            current_statement_begin__ = 69;
            context__.validate_dims("data initialization", "n_active_regions", "int", context__.to_vec());
            n_active_regions = int(0);
            vals_i__ = context__.vals_i("n_active_regions");
            pos__ = 0;
            n_active_regions = vals_i__[pos__++];
            current_statement_begin__ = 70;
            context__.validate_dims("data initialization", "n_times", "int", context__.to_vec());
            n_times = int(0);
            vals_i__ = context__.vals_i("n_times");
            pos__ = 0;
            n_times = vals_i__[pos__++];
            current_statement_begin__ = 71;
            context__.validate_dims("data initialization", "n_target_data", "int", context__.to_vec());
            n_target_data = int(0);
            vals_i__ = context__.vals_i("n_target_data");
            pos__ = 0;
            n_target_data = vals_i__[pos__++];
            current_statement_begin__ = 72;
            context__.validate_dims("data initialization", "Iext1", "double", context__.to_vec());
            Iext1 = double(0);
            vals_r__ = context__.vals_r("Iext1");
            pos__ = 0;
            Iext1 = vals_r__[pos__++];
            current_statement_begin__ = 73;
            context__.validate_dims("data initialization", "tau0", "double", context__.to_vec());
            tau0 = double(0);
            vals_r__ = context__.vals_r("tau0");
            pos__ = 0;
            tau0 = vals_r__[pos__++];
            current_statement_begin__ = 74;
            context__.validate_dims("data initialization", "dt", "double", context__.to_vec());
            dt = double(0);
            vals_r__ = context__.vals_r("dt");
            pos__ = 0;
            dt = vals_r__[pos__++];
            current_statement_begin__ = 75;
            context__.validate_dims("data initialization", "x0_hi", "double", context__.to_vec());
            x0_hi = double(0);
            vals_r__ = context__.vals_r("x0_hi");
            pos__ = 0;
            x0_hi = vals_r__[pos__++];
            current_statement_begin__ = 78;
            validate_non_negative_index("x0_star_mu", "n_active_regions", n_active_regions);
            context__.validate_dims("data initialization", "x0_star_mu", "row_vector_d", context__.to_vec(n_active_regions));
            validate_non_negative_index("x0_star_mu", "n_active_regions", n_active_regions);
            x0_star_mu = row_vector_d(static_cast<Eigen::VectorXd::Index>(n_active_regions));
            vals_r__ = context__.vals_r("x0_star_mu");
            pos__ = 0;
            size_t x0_star_mu_i_vec_lim__ = n_active_regions;
            for (size_t i_vec__ = 0; i_vec__ < x0_star_mu_i_vec_lim__; ++i_vec__) {
                x0_star_mu[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 79;
            validate_non_negative_index("x0_star_std", "n_active_regions", n_active_regions);
            context__.validate_dims("data initialization", "x0_star_std", "row_vector_d", context__.to_vec(n_active_regions));
            validate_non_negative_index("x0_star_std", "n_active_regions", n_active_regions);
            x0_star_std = row_vector_d(static_cast<Eigen::VectorXd::Index>(n_active_regions));
            vals_r__ = context__.vals_r("x0_star_std");
            pos__ = 0;
            size_t x0_star_std_i_vec_lim__ = n_active_regions;
            for (size_t i_vec__ = 0; i_vec__ < x0_star_std_i_vec_lim__; ++i_vec__) {
                x0_star_std[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 81;
            context__.validate_dims("data initialization", "x1_eq_def", "double", context__.to_vec());
            x1_eq_def = double(0);
            vals_r__ = context__.vals_r("x1_eq_def");
            pos__ = 0;
            x1_eq_def = vals_r__[pos__++];
            current_statement_begin__ = 82;
            validate_non_negative_index("x1_init_mu", "n_active_regions", n_active_regions);
            context__.validate_dims("data initialization", "x1_init_mu", "row_vector_d", context__.to_vec(n_active_regions));
            validate_non_negative_index("x1_init_mu", "n_active_regions", n_active_regions);
            x1_init_mu = row_vector_d(static_cast<Eigen::VectorXd::Index>(n_active_regions));
            vals_r__ = context__.vals_r("x1_init_mu");
            pos__ = 0;
            size_t x1_init_mu_i_vec_lim__ = n_active_regions;
            for (size_t i_vec__ = 0; i_vec__ < x1_init_mu_i_vec_lim__; ++i_vec__) {
                x1_init_mu[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 83;
            validate_non_negative_index("z_init_mu", "n_active_regions", n_active_regions);
            context__.validate_dims("data initialization", "z_init_mu", "row_vector_d", context__.to_vec(n_active_regions));
            validate_non_negative_index("z_init_mu", "n_active_regions", n_active_regions);
            z_init_mu = row_vector_d(static_cast<Eigen::VectorXd::Index>(n_active_regions));
            vals_r__ = context__.vals_r("z_init_mu");
            pos__ = 0;
            size_t z_init_mu_i_vec_lim__ = n_active_regions;
            for (size_t i_vec__ = 0; i_vec__ < z_init_mu_i_vec_lim__; ++i_vec__) {
                z_init_mu[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 84;
            context__.validate_dims("data initialization", "x1_init_std", "double", context__.to_vec());
            x1_init_std = double(0);
            vals_r__ = context__.vals_r("x1_init_std");
            pos__ = 0;
            x1_init_std = vals_r__[pos__++];
            current_statement_begin__ = 85;
            context__.validate_dims("data initialization", "z_init_std", "double", context__.to_vec());
            z_init_std = double(0);
            vals_r__ = context__.vals_r("z_init_std");
            pos__ = 0;
            z_init_std = vals_r__[pos__++];
            current_statement_begin__ = 86;
            context__.validate_dims("data initialization", "tau1_mu", "double", context__.to_vec());
            tau1_mu = double(0);
            vals_r__ = context__.vals_r("tau1_mu");
            pos__ = 0;
            tau1_mu = vals_r__[pos__++];
            current_statement_begin__ = 87;
            context__.validate_dims("data initialization", "tau1_std", "double", context__.to_vec());
            tau1_std = double(0);
            vals_r__ = context__.vals_r("tau1_std");
            pos__ = 0;
            tau1_std = vals_r__[pos__++];
            current_statement_begin__ = 88;
            context__.validate_dims("data initialization", "K_mu", "double", context__.to_vec());
            K_mu = double(0);
            vals_r__ = context__.vals_r("K_mu");
            pos__ = 0;
            K_mu = vals_r__[pos__++];
            current_statement_begin__ = 89;
            context__.validate_dims("data initialization", "K_std", "double", context__.to_vec());
            K_std = double(0);
            vals_r__ = context__.vals_r("K_std");
            pos__ = 0;
            K_std = vals_r__[pos__++];
            current_statement_begin__ = 90;
            context__.validate_dims("data initialization", "sigma_mu", "double", context__.to_vec());
            sigma_mu = double(0);
            vals_r__ = context__.vals_r("sigma_mu");
            pos__ = 0;
            sigma_mu = vals_r__[pos__++];
            current_statement_begin__ = 91;
            context__.validate_dims("data initialization", "sigma_std", "double", context__.to_vec());
            sigma_std = double(0);
            vals_r__ = context__.vals_r("sigma_std");
            pos__ = 0;
            sigma_std = vals_r__[pos__++];
            current_statement_begin__ = 92;
            context__.validate_dims("data initialization", "epsilon_mu", "double", context__.to_vec());
            epsilon_mu = double(0);
            vals_r__ = context__.vals_r("epsilon_mu");
            pos__ = 0;
            epsilon_mu = vals_r__[pos__++];
            current_statement_begin__ = 93;
            context__.validate_dims("data initialization", "epsilon_std", "double", context__.to_vec());
            epsilon_std = double(0);
            vals_r__ = context__.vals_r("epsilon_std");
            pos__ = 0;
            epsilon_std = vals_r__[pos__++];
            current_statement_begin__ = 94;
            context__.validate_dims("data initialization", "offset_mu", "double", context__.to_vec());
            offset_mu = double(0);
            vals_r__ = context__.vals_r("offset_mu");
            pos__ = 0;
            offset_mu = vals_r__[pos__++];
            current_statement_begin__ = 95;
            context__.validate_dims("data initialization", "offset_std", "double", context__.to_vec());
            offset_std = double(0);
            vals_r__ = context__.vals_r("offset_std");
            pos__ = 0;
            offset_std = vals_r__[pos__++];
            current_statement_begin__ = 96;
            context__.validate_dims("data initialization", "scale_mu", "double", context__.to_vec());
            scale_mu = double(0);
            vals_r__ = context__.vals_r("scale_mu");
            pos__ = 0;
            scale_mu = vals_r__[pos__++];
            current_statement_begin__ = 97;
            context__.validate_dims("data initialization", "scale_std", "double", context__.to_vec());
            scale_std = double(0);
            vals_r__ = context__.vals_r("scale_std");
            pos__ = 0;
            scale_std = vals_r__[pos__++];
            current_statement_begin__ = 98;
            context__.validate_dims("data initialization", "scale_lo", "double", context__.to_vec());
            scale_lo = double(0);
            vals_r__ = context__.vals_r("scale_lo");
            pos__ = 0;
            scale_lo = vals_r__[pos__++];
            current_statement_begin__ = 99;
            context__.validate_dims("data initialization", "log_target_data", "int", context__.to_vec());
            log_target_data = int(0);
            vals_i__ = context__.vals_i("log_target_data");
            pos__ = 0;
            log_target_data = vals_i__[pos__++];
            current_statement_begin__ = 100;
            validate_non_negative_index("gain", "n_target_data", n_target_data);
            validate_non_negative_index("gain", "n_active_regions", n_active_regions);
            context__.validate_dims("data initialization", "gain", "matrix_d", context__.to_vec(n_target_data,n_active_regions));
            validate_non_negative_index("gain", "n_target_data", n_target_data);
            validate_non_negative_index("gain", "n_active_regions", n_active_regions);
            gain = matrix_d(static_cast<Eigen::VectorXd::Index>(n_target_data),static_cast<Eigen::VectorXd::Index>(n_active_regions));
            vals_r__ = context__.vals_r("gain");
            pos__ = 0;
            size_t gain_m_mat_lim__ = n_target_data;
            size_t gain_n_mat_lim__ = n_active_regions;
            for (size_t n_mat__ = 0; n_mat__ < gain_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < gain_m_mat_lim__; ++m_mat__) {
                    gain(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 101;
            validate_non_negative_index("target_data", "n_times", n_times);
            validate_non_negative_index("target_data", "n_target_data", n_target_data);
            context__.validate_dims("data initialization", "target_data", "row_vector_d", context__.to_vec(n_times,n_target_data));
            validate_non_negative_index("target_data", "n_times", n_times);
            validate_non_negative_index("target_data", "n_target_data", n_target_data);
            target_data = std::vector<row_vector_d>(n_times,row_vector_d(static_cast<Eigen::VectorXd::Index>(n_target_data)));
            vals_r__ = context__.vals_r("target_data");
            pos__ = 0;
            size_t target_data_i_vec_lim__ = n_target_data;
            for (size_t i_vec__ = 0; i_vec__ < target_data_i_vec_lim__; ++i_vec__) {
                size_t target_data_limit_0__ = n_times;
                for (size_t i_0__ = 0; i_0__ < target_data_limit_0__; ++i_0__) {
                    target_data[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 102;
            validate_non_negative_index("Ic", "n_active_regions", n_active_regions);
            context__.validate_dims("data initialization", "Ic", "vector_d", context__.to_vec(n_active_regions));
            validate_non_negative_index("Ic", "n_active_regions", n_active_regions);
            Ic = vector_d(static_cast<Eigen::VectorXd::Index>(n_active_regions));
            vals_r__ = context__.vals_r("Ic");
            pos__ = 0;
            size_t Ic_i_vec_lim__ = n_active_regions;
            for (size_t i_vec__ = 0; i_vec__ < Ic_i_vec_lim__; ++i_vec__) {
                Ic[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 103;
            validate_non_negative_index("SC", "n_active_regions", n_active_regions);
            validate_non_negative_index("SC", "n_active_regions", n_active_regions);
            context__.validate_dims("data initialization", "SC", "matrix_d", context__.to_vec(n_active_regions,n_active_regions));
            validate_non_negative_index("SC", "n_active_regions", n_active_regions);
            validate_non_negative_index("SC", "n_active_regions", n_active_regions);
            SC = matrix_d(static_cast<Eigen::VectorXd::Index>(n_active_regions),static_cast<Eigen::VectorXd::Index>(n_active_regions));
            vals_r__ = context__.vals_r("SC");
            pos__ = 0;
            size_t SC_m_mat_lim__ = n_active_regions;
            size_t SC_n_mat_lim__ = n_active_regions;
            for (size_t n_mat__ = 0; n_mat__ < SC_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < SC_m_mat_lim__; ++m_mat__) {
                    SC(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }

            // validate, data variables
            current_statement_begin__ = 67;
            current_statement_begin__ = 68;
            current_statement_begin__ = 69;
            current_statement_begin__ = 70;
            current_statement_begin__ = 71;
            current_statement_begin__ = 72;
            current_statement_begin__ = 73;
            current_statement_begin__ = 74;
            current_statement_begin__ = 75;
            current_statement_begin__ = 78;
            current_statement_begin__ = 79;
            current_statement_begin__ = 81;
            current_statement_begin__ = 82;
            current_statement_begin__ = 83;
            current_statement_begin__ = 84;
            current_statement_begin__ = 85;
            current_statement_begin__ = 86;
            current_statement_begin__ = 87;
            current_statement_begin__ = 88;
            current_statement_begin__ = 89;
            current_statement_begin__ = 90;
            current_statement_begin__ = 91;
            current_statement_begin__ = 92;
            current_statement_begin__ = 93;
            current_statement_begin__ = 94;
            current_statement_begin__ = 95;
            current_statement_begin__ = 96;
            current_statement_begin__ = 97;
            current_statement_begin__ = 98;
            current_statement_begin__ = 99;
            current_statement_begin__ = 100;
            current_statement_begin__ = 101;
            current_statement_begin__ = 102;
            current_statement_begin__ = 103;
            check_greater_or_equal(function__,"SC",SC,0.0);
            check_less_or_equal(function__,"SC",SC,1.0);
            // initialize data variables
            current_statement_begin__ = 107;
            sqrtdt = double(0);
            stan::math::fill(sqrtdt,DUMMY_VAR__);
            stan::math::assign(sqrtdt,stan::math::sqrt(dt));
            current_statement_begin__ = 108;
            validate_non_negative_index("scale_mu_sigma", "2", 2);
            scale_mu_sigma = std::vector<double>(2,double(0));
            stan::math::fill(scale_mu_sigma,DUMMY_VAR__);
            stan::math::assign(scale_mu_sigma,normal_mean_std_to_lognorm_mu_sigma(scale_mu,scale_std, pstream__));
            current_statement_begin__ = 109;
            validate_non_negative_index("epsilon_mu_sigma", "2", 2);
            epsilon_mu_sigma = std::vector<double>(2,double(0));
            stan::math::fill(epsilon_mu_sigma,DUMMY_VAR__);
            stan::math::assign(epsilon_mu_sigma,normal_mean_std_to_lognorm_mu_sigma(epsilon_mu,epsilon_std, pstream__));
            current_statement_begin__ = 110;
            validate_non_negative_index("tau1_mu_sigma", "2", 2);
            tau1_mu_sigma = std::vector<double>(2,double(0));
            stan::math::fill(tau1_mu_sigma,DUMMY_VAR__);
            stan::math::assign(tau1_mu_sigma,normal_mean_std_to_lognorm_mu_sigma(tau1_mu,tau1_std, pstream__));
            current_statement_begin__ = 112;
            K = double(0);
            stan::math::fill(K,DUMMY_VAR__);
            stan::math::assign(K,K_mu);
            current_statement_begin__ = 113;
            validate_non_negative_index("sigma_mu_sigma", "2", 2);
            sigma_mu_sigma = std::vector<double>(2,double(0));
            stan::math::fill(sigma_mu_sigma,DUMMY_VAR__);
            stan::math::assign(sigma_mu_sigma,normal_mean_std_to_lognorm_mu_sigma(sigma_mu,sigma_std, pstream__));
            current_statement_begin__ = 114;
            validate_non_negative_index("x0_logmu", "n_active_regions", n_active_regions);
            x0_logmu = row_vector_d(static_cast<Eigen::VectorXd::Index>(n_active_regions));
            stan::math::fill(x0_logmu,DUMMY_VAR__);
            stan::math::assign(x0_logmu,normal_mean_std_to_lognorm_mu(x0_star_mu,x0_star_std, pstream__));
            current_statement_begin__ = 115;
            validate_non_negative_index("x0_sigma", "n_active_regions", n_active_regions);
            x0_sigma = row_vector_d(static_cast<Eigen::VectorXd::Index>(n_active_regions));
            stan::math::fill(x0_sigma,DUMMY_VAR__);
            stan::math::assign(x0_sigma,normal_mean_std_to_lognorm_sigma(x0_star_mu,x0_star_std, pstream__));
            current_statement_begin__ = 116;
            validate_non_negative_index("SC_", "n_active_regions", n_active_regions);
            validate_non_negative_index("SC_", "n_active_regions", n_active_regions);
            SC_ = matrix_d(static_cast<Eigen::VectorXd::Index>(n_active_regions),static_cast<Eigen::VectorXd::Index>(n_active_regions));
            stan::math::fill(SC_,DUMMY_VAR__);
            stan::math::assign(SC_,SC);

            current_statement_begin__ = 117;
            for (int i = 1; i <= n_active_regions; ++i) {
                current_statement_begin__ = 117;
                stan::math::assign(get_base1_lhs(SC_,i,i,"SC_",1), 0);
            }
            current_statement_begin__ = 118;
            stan::math::assign(SC_, multiply(divide(SC_,max(SC_)),rows(SC_)));

            // validate transformed data
            current_statement_begin__ = 107;
            current_statement_begin__ = 108;
            current_statement_begin__ = 109;
            current_statement_begin__ = 110;
            current_statement_begin__ = 112;
            current_statement_begin__ = 113;
            current_statement_begin__ = 114;
            current_statement_begin__ = 115;
            current_statement_begin__ = 116;

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 137;
        validate_non_negative_index("x0_star", "n_active_regions", n_active_regions);
            num_params_r__ += n_active_regions;
            current_statement_begin__ = 138;
            ++num_params_r__;
            current_statement_begin__ = 139;
            ++num_params_r__;
            current_statement_begin__ = 140;
            ++num_params_r__;
            current_statement_begin__ = 141;
            ++num_params_r__;
            current_statement_begin__ = 142;
            ++num_params_r__;
            current_statement_begin__ = 146;
        validate_non_negative_index("x1_init_star", "n_active_regions", n_active_regions);
            num_params_r__ += n_active_regions;
            current_statement_begin__ = 147;
        validate_non_negative_index("z_init_star", "n_active_regions", n_active_regions);
            num_params_r__ += n_active_regions;
            current_statement_begin__ = 149;
        validate_non_negative_index("dZt_star", "n_active_regions", n_active_regions);
            validate_non_negative_index("dZt_star", "(n_times - 1)", (n_times - 1));
            num_params_r__ += n_active_regions * (n_times - 1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~vep_sde_simple_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("x0_star")))
            throw std::runtime_error("variable x0_star missing");
        vals_r__ = context__.vals_r("x0_star");
        pos__ = 0U;
        validate_non_negative_index("x0_star", "n_active_regions", n_active_regions);
        context__.validate_dims("initialization", "x0_star", "row_vector_d", context__.to_vec(n_active_regions));
        row_vector_d x0_star(static_cast<Eigen::VectorXd::Index>(n_active_regions));
        for (int j1__ = 0U; j1__ < n_active_regions; ++j1__)
            x0_star(j1__) = vals_r__[pos__++];
        try {
            writer__.row_vector_unconstrain(x0_star);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable x0_star: ") + e.what());
        }

        if (!(context__.contains_r("epsilon_star")))
            throw std::runtime_error("variable epsilon_star missing");
        vals_r__ = context__.vals_r("epsilon_star");
        pos__ = 0U;
        context__.validate_dims("initialization", "epsilon_star", "double", context__.to_vec());
        double epsilon_star(0);
        epsilon_star = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(epsilon_star);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable epsilon_star: ") + e.what());
        }

        if (!(context__.contains_r("scale_star")))
            throw std::runtime_error("variable scale_star missing");
        vals_r__ = context__.vals_r("scale_star");
        pos__ = 0U;
        context__.validate_dims("initialization", "scale_star", "double", context__.to_vec());
        double scale_star(0);
        scale_star = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(scale_star);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable scale_star: ") + e.what());
        }

        if (!(context__.contains_r("offset_star")))
            throw std::runtime_error("variable offset_star missing");
        vals_r__ = context__.vals_r("offset_star");
        pos__ = 0U;
        context__.validate_dims("initialization", "offset_star", "double", context__.to_vec());
        double offset_star(0);
        offset_star = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(offset_star);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable offset_star: ") + e.what());
        }

        if (!(context__.contains_r("sigma_star")))
            throw std::runtime_error("variable sigma_star missing");
        vals_r__ = context__.vals_r("sigma_star");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma_star", "double", context__.to_vec());
        double sigma_star(0);
        sigma_star = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(sigma_star);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma_star: ") + e.what());
        }

        if (!(context__.contains_r("tau1_star")))
            throw std::runtime_error("variable tau1_star missing");
        vals_r__ = context__.vals_r("tau1_star");
        pos__ = 0U;
        context__.validate_dims("initialization", "tau1_star", "double", context__.to_vec());
        double tau1_star(0);
        tau1_star = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(tau1_star);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable tau1_star: ") + e.what());
        }

        if (!(context__.contains_r("x1_init_star")))
            throw std::runtime_error("variable x1_init_star missing");
        vals_r__ = context__.vals_r("x1_init_star");
        pos__ = 0U;
        validate_non_negative_index("x1_init_star", "n_active_regions", n_active_regions);
        context__.validate_dims("initialization", "x1_init_star", "row_vector_d", context__.to_vec(n_active_regions));
        row_vector_d x1_init_star(static_cast<Eigen::VectorXd::Index>(n_active_regions));
        for (int j1__ = 0U; j1__ < n_active_regions; ++j1__)
            x1_init_star(j1__) = vals_r__[pos__++];
        try {
            writer__.row_vector_unconstrain(x1_init_star);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable x1_init_star: ") + e.what());
        }

        if (!(context__.contains_r("z_init_star")))
            throw std::runtime_error("variable z_init_star missing");
        vals_r__ = context__.vals_r("z_init_star");
        pos__ = 0U;
        validate_non_negative_index("z_init_star", "n_active_regions", n_active_regions);
        context__.validate_dims("initialization", "z_init_star", "row_vector_d", context__.to_vec(n_active_regions));
        row_vector_d z_init_star(static_cast<Eigen::VectorXd::Index>(n_active_regions));
        for (int j1__ = 0U; j1__ < n_active_regions; ++j1__)
            z_init_star(j1__) = vals_r__[pos__++];
        try {
            writer__.row_vector_unconstrain(z_init_star);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_init_star: ") + e.what());
        }

        if (!(context__.contains_r("dZt_star")))
            throw std::runtime_error("variable dZt_star missing");
        vals_r__ = context__.vals_r("dZt_star");
        pos__ = 0U;
        validate_non_negative_index("dZt_star", "(n_times - 1)", (n_times - 1));
        validate_non_negative_index("dZt_star", "n_active_regions", n_active_regions);
        context__.validate_dims("initialization", "dZt_star", "row_vector_d", context__.to_vec((n_times - 1),n_active_regions));
        std::vector<row_vector_d> dZt_star((n_times - 1),row_vector_d(static_cast<Eigen::VectorXd::Index>(n_active_regions)));
        for (int j1__ = 0U; j1__ < n_active_regions; ++j1__)
            for (int i0__ = 0U; i0__ < (n_times - 1); ++i0__)
                dZt_star[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < (n_times - 1); ++i0__)
            try {
            writer__.row_vector_unconstrain(dZt_star[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable dZt_star: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  x0_star;
            (void) x0_star;  // dummy to suppress unused var warning
            if (jacobian__)
                x0_star = in__.row_vector_constrain(n_active_regions,lp__);
            else
                x0_star = in__.row_vector_constrain(n_active_regions);

            local_scalar_t__ epsilon_star;
            (void) epsilon_star;  // dummy to suppress unused var warning
            if (jacobian__)
                epsilon_star = in__.scalar_constrain(lp__);
            else
                epsilon_star = in__.scalar_constrain();

            local_scalar_t__ scale_star;
            (void) scale_star;  // dummy to suppress unused var warning
            if (jacobian__)
                scale_star = in__.scalar_constrain(lp__);
            else
                scale_star = in__.scalar_constrain();

            local_scalar_t__ offset_star;
            (void) offset_star;  // dummy to suppress unused var warning
            if (jacobian__)
                offset_star = in__.scalar_constrain(lp__);
            else
                offset_star = in__.scalar_constrain();

            local_scalar_t__ sigma_star;
            (void) sigma_star;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_star = in__.scalar_constrain(lp__);
            else
                sigma_star = in__.scalar_constrain();

            local_scalar_t__ tau1_star;
            (void) tau1_star;  // dummy to suppress unused var warning
            if (jacobian__)
                tau1_star = in__.scalar_constrain(lp__);
            else
                tau1_star = in__.scalar_constrain();

            Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  x1_init_star;
            (void) x1_init_star;  // dummy to suppress unused var warning
            if (jacobian__)
                x1_init_star = in__.row_vector_constrain(n_active_regions,lp__);
            else
                x1_init_star = in__.row_vector_constrain(n_active_regions);

            Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  z_init_star;
            (void) z_init_star;  // dummy to suppress unused var warning
            if (jacobian__)
                z_init_star = in__.row_vector_constrain(n_active_regions,lp__);
            else
                z_init_star = in__.row_vector_constrain(n_active_regions);

            vector<Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic> > dZt_star;
            size_t dim_dZt_star_0__ = (n_times - 1);
            dZt_star.reserve(dim_dZt_star_0__);
            for (size_t k_0__ = 0; k_0__ < dim_dZt_star_0__; ++k_0__) {
                if (jacobian__)
                    dZt_star.push_back(in__.row_vector_constrain(n_active_regions,lp__));
                else
                    dZt_star.push_back(in__.row_vector_constrain(n_active_regions));
            }


            // transformed parameters
            current_statement_begin__ = 154;
            local_scalar_t__ offset;
            (void) offset;  // dummy to suppress unused var warning

            stan::math::initialize(offset, DUMMY_VAR__);
            stan::math::fill(offset,DUMMY_VAR__);
            stan::math::assign(offset,(offset_mu + (offset_star * offset_std)));
            current_statement_begin__ = 155;
            local_scalar_t__ scale;
            (void) scale;  // dummy to suppress unused var warning

            stan::math::initialize(scale, DUMMY_VAR__);
            stan::math::fill(scale,DUMMY_VAR__);
            stan::math::assign(scale,standard_normal_to_lognormal(scale_star,get_base1(scale_mu_sigma,1,"scale_mu_sigma",1),get_base1(scale_mu_sigma,2,"scale_mu_sigma",1), pstream__));
            current_statement_begin__ = 156;
            local_scalar_t__ epsilon;
            (void) epsilon;  // dummy to suppress unused var warning

            stan::math::initialize(epsilon, DUMMY_VAR__);
            stan::math::fill(epsilon,DUMMY_VAR__);
            stan::math::assign(epsilon,standard_normal_to_lognormal(epsilon_star,get_base1(epsilon_mu_sigma,1,"epsilon_mu_sigma",1),get_base1(epsilon_mu_sigma,2,"epsilon_mu_sigma",1), pstream__));
            current_statement_begin__ = 157;
            local_scalar_t__ sigma;
            (void) sigma;  // dummy to suppress unused var warning

            stan::math::initialize(sigma, DUMMY_VAR__);
            stan::math::fill(sigma,DUMMY_VAR__);
            stan::math::assign(sigma,standard_normal_to_lognormal(sigma_star,get_base1(sigma_mu_sigma,1,"sigma_mu_sigma",1),get_base1(sigma_mu_sigma,2,"sigma_mu_sigma",1), pstream__));
            current_statement_begin__ = 158;
            local_scalar_t__ tau1;
            (void) tau1;  // dummy to suppress unused var warning

            stan::math::initialize(tau1, DUMMY_VAR__);
            stan::math::fill(tau1,DUMMY_VAR__);
            stan::math::assign(tau1,standard_normal_to_lognormal(tau1_star,get_base1(tau1_mu_sigma,1,"tau1_mu_sigma",1),get_base1(tau1_mu_sigma,2,"tau1_mu_sigma",1), pstream__));
            current_statement_begin__ = 160;
            validate_non_negative_index("x0", "n_active_regions", n_active_regions);
            Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  x0(static_cast<Eigen::VectorXd::Index>(n_active_regions));
            (void) x0;  // dummy to suppress unused var warning

            stan::math::initialize(x0, DUMMY_VAR__);
            stan::math::fill(x0,DUMMY_VAR__);
            stan::math::assign(x0,subtract(x0_hi,standard_normal_to_lognormal_row(x0_star,x0_logmu,x0_sigma, pstream__)));
            current_statement_begin__ = 161;
            validate_non_negative_index("x1_init", "n_active_regions", n_active_regions);
            Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  x1_init(static_cast<Eigen::VectorXd::Index>(n_active_regions));
            (void) x1_init;  // dummy to suppress unused var warning

            stan::math::initialize(x1_init, DUMMY_VAR__);
            stan::math::fill(x1_init,DUMMY_VAR__);
            stan::math::assign(x1_init,add(x1_init_mu,multiply(x1_init_star,x1_init_std)));
            current_statement_begin__ = 162;
            validate_non_negative_index("z_init", "n_active_regions", n_active_regions);
            Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  z_init(static_cast<Eigen::VectorXd::Index>(n_active_regions));
            (void) z_init;  // dummy to suppress unused var warning

            stan::math::initialize(z_init, DUMMY_VAR__);
            stan::math::fill(z_init,DUMMY_VAR__);
            stan::math::assign(z_init,add(z_init_mu,multiply(z_init_star,z_init_std)));
            current_statement_begin__ = 163;
            validate_non_negative_index("x1", "n_active_regions", n_active_regions);
            validate_non_negative_index("x1", "n_times", n_times);
            vector<Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic> > x1(n_times, (Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(n_active_regions))));
            stan::math::initialize(x1, DUMMY_VAR__);
            stan::math::fill(x1,DUMMY_VAR__);
            current_statement_begin__ = 164;
            validate_non_negative_index("z", "n_active_regions", n_active_regions);
            validate_non_negative_index("z", "n_times", n_times);
            vector<Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic> > z(n_times, (Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(n_active_regions))));
            stan::math::initialize(z, DUMMY_VAR__);
            stan::math::fill(z,DUMMY_VAR__);
            current_statement_begin__ = 165;
            validate_non_negative_index("fit_target_data", "n_target_data", n_target_data);
            validate_non_negative_index("fit_target_data", "n_times", n_times);
            vector<Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic> > fit_target_data(n_times, (Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(n_target_data))));
            stan::math::initialize(fit_target_data, DUMMY_VAR__);
            stan::math::fill(fit_target_data,DUMMY_VAR__);


            current_statement_begin__ = 167;
            stan::math::assign(get_base1_lhs(x1,1,"x1",1), x1_init);
            current_statement_begin__ = 168;
            stan::math::assign(get_base1_lhs(z,1,"z",1), z_init);
            current_statement_begin__ = 169;
            for (int t = 1; t <= (n_times - 1); ++t) {

                current_statement_begin__ = 170;
                stan::math::assign(get_base1_lhs(x1,(t + 1),"x1",1), x1_step(get_base1(x1,t,"x1",1),get_base1(z,t,"z",1),Iext1,(dt * tau1), pstream__));
                current_statement_begin__ = 171;
                stan::math::assign(get_base1_lhs(z,(t + 1),"z",1), z_step(get_base1(x1,t,"x1",1),get_base1(z,t,"z",1),x0,multiply(K,SC),Ic,x1_eq_def,(dt * tau1),get_base1(dZt_star,t,"dZt_star",1),(sqrtdt * sigma),tau0, pstream__));
            }
            current_statement_begin__ = 174;
            if (as_bool(logical_gt(log_target_data,0))) {

                current_statement_begin__ = 175;
                for (int t = 1; t <= n_times; ++t) {
                    current_statement_begin__ = 176;
                    stan::math::assign(get_base1_lhs(fit_target_data,t,"fit_target_data",1), multiply(scale,transpose(add(stan::math::log(multiply(gain,stan::math::exp(subtract(transpose(get_base1(x1,t,"x1",1)),x1_eq_def)))),offset))));
                }
            } else {

                current_statement_begin__ = 178;
                for (int t = 1; t <= n_times; ++t) {
                    current_statement_begin__ = 179;
                    stan::math::assign(get_base1_lhs(fit_target_data,t,"fit_target_data",1), multiply(scale,transpose(add(multiply(gain,subtract(transpose(get_base1(x1,t,"x1",1)),x1_eq_def)),offset))));
                }
            }

            // validate transformed parameters
            if (stan::math::is_uninitialized(offset)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: offset";
                throw std::runtime_error(msg__.str());
            }
            if (stan::math::is_uninitialized(scale)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: scale";
                throw std::runtime_error(msg__.str());
            }
            if (stan::math::is_uninitialized(epsilon)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: epsilon";
                throw std::runtime_error(msg__.str());
            }
            if (stan::math::is_uninitialized(sigma)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: sigma";
                throw std::runtime_error(msg__.str());
            }
            if (stan::math::is_uninitialized(tau1)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: tau1";
                throw std::runtime_error(msg__.str());
            }
            for (int i0__ = 0; i0__ < n_active_regions; ++i0__) {
                if (stan::math::is_uninitialized(x0(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: x0" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < n_active_regions; ++i0__) {
                if (stan::math::is_uninitialized(x1_init(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: x1_init" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < n_active_regions; ++i0__) {
                if (stan::math::is_uninitialized(z_init(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: z_init" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < n_times; ++i0__) {
                for (int i1__ = 0; i1__ < n_active_regions; ++i1__) {
                    if (stan::math::is_uninitialized(x1[i0__](i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: x1" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < n_times; ++i0__) {
                for (int i1__ = 0; i1__ < n_active_regions; ++i1__) {
                    if (stan::math::is_uninitialized(z[i0__](i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: z" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < n_times; ++i0__) {
                for (int i1__ = 0; i1__ < n_target_data; ++i1__) {
                    if (stan::math::is_uninitialized(fit_target_data[i0__](i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: fit_target_data" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 154;
            current_statement_begin__ = 155;
            current_statement_begin__ = 156;
            current_statement_begin__ = 157;
            current_statement_begin__ = 158;
            current_statement_begin__ = 160;
            current_statement_begin__ = 161;
            current_statement_begin__ = 162;
            current_statement_begin__ = 163;
            current_statement_begin__ = 164;
            current_statement_begin__ = 165;

            // model body

            current_statement_begin__ = 194;
            lp_accum__.add(normal_log<propto__>(offset_star, 0.0, 1.0));
            current_statement_begin__ = 195;
            lp_accum__.add(normal_log<propto__>(scale_star, 0.0, 1.0));
            current_statement_begin__ = 196;
            lp_accum__.add(normal_log<propto__>(epsilon_star, 0.0, 1.0));
            current_statement_begin__ = 197;
            lp_accum__.add(normal_log<propto__>(sigma_star, 0.0, 1.0));
            current_statement_begin__ = 198;
            lp_accum__.add(normal_log<propto__>(tau1_star, 0.0, 1.0));
            current_statement_begin__ = 200;
            lp_accum__.add(normal_log<propto__>(to_row_vector(x0_star), 0.0, 1.0));
            current_statement_begin__ = 201;
            lp_accum__.add(normal_log<propto__>(x1_init_star, 0.0, 1.0));
            current_statement_begin__ = 202;
            lp_accum__.add(normal_log<propto__>(z_init_star, 0.0, 1.0));
            current_statement_begin__ = 204;
            for (int t = 1; t <= (n_times - 1); ++t) {

                current_statement_begin__ = 206;
                lp_accum__.add(normal_log<propto__>(to_vector(get_base1(dZt_star,t,"dZt_star",1)), 0.0, 1.0));
            }
            current_statement_begin__ = 209;
            if (as_bool(logical_lt(SIMULATE,1))) {
                current_statement_begin__ = 210;
                for (int t = 1; t <= n_times; ++t) {
                    current_statement_begin__ = 211;
                    lp_accum__.add(normal_log<propto__>(get_base1(target_data,t,"target_data",1), get_base1(fit_target_data,t,"fit_target_data",1), epsilon));
                }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("x0_star");
        names__.push_back("epsilon_star");
        names__.push_back("scale_star");
        names__.push_back("offset_star");
        names__.push_back("sigma_star");
        names__.push_back("tau1_star");
        names__.push_back("x1_init_star");
        names__.push_back("z_init_star");
        names__.push_back("dZt_star");
        names__.push_back("offset");
        names__.push_back("scale");
        names__.push_back("epsilon");
        names__.push_back("sigma");
        names__.push_back("tau1");
        names__.push_back("x0");
        names__.push_back("x1_init");
        names__.push_back("z_init");
        names__.push_back("x1");
        names__.push_back("z");
        names__.push_back("fit_target_data");
        names__.push_back("log_likelihood");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(n_active_regions);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_active_regions);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_active_regions);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((n_times - 1));
        dims__.push_back(n_active_regions);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_active_regions);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_active_regions);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_active_regions);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_times);
        dims__.push_back(n_active_regions);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_times);
        dims__.push_back(n_active_regions);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_times);
        dims__.push_back(n_target_data);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_times);
        dims__.push_back(n_target_data);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "vep_sde_simple_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        row_vector_d x0_star = in__.row_vector_constrain(n_active_regions);
        double epsilon_star = in__.scalar_constrain();
        double scale_star = in__.scalar_constrain();
        double offset_star = in__.scalar_constrain();
        double sigma_star = in__.scalar_constrain();
        double tau1_star = in__.scalar_constrain();
        row_vector_d x1_init_star = in__.row_vector_constrain(n_active_regions);
        row_vector_d z_init_star = in__.row_vector_constrain(n_active_regions);
        vector<row_vector_d> dZt_star;
        size_t dim_dZt_star_0__ = (n_times - 1);
        for (size_t k_0__ = 0; k_0__ < dim_dZt_star_0__; ++k_0__) {
            dZt_star.push_back(in__.row_vector_constrain(n_active_regions));
        }
            for (int k_0__ = 0; k_0__ < n_active_regions; ++k_0__) {
            vars__.push_back(x0_star[k_0__]);
            }
        vars__.push_back(epsilon_star);
        vars__.push_back(scale_star);
        vars__.push_back(offset_star);
        vars__.push_back(sigma_star);
        vars__.push_back(tau1_star);
            for (int k_0__ = 0; k_0__ < n_active_regions; ++k_0__) {
            vars__.push_back(x1_init_star[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < n_active_regions; ++k_0__) {
            vars__.push_back(z_init_star[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < n_active_regions; ++k_1__) {
                for (int k_0__ = 0; k_0__ < (n_times - 1); ++k_0__) {
                vars__.push_back(dZt_star[k_0__][k_1__]);
                }
            }

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 154;
            local_scalar_t__ offset;
            (void) offset;  // dummy to suppress unused var warning

            stan::math::initialize(offset, DUMMY_VAR__);
            stan::math::fill(offset,DUMMY_VAR__);
            stan::math::assign(offset,(offset_mu + (offset_star * offset_std)));
            current_statement_begin__ = 155;
            local_scalar_t__ scale;
            (void) scale;  // dummy to suppress unused var warning

            stan::math::initialize(scale, DUMMY_VAR__);
            stan::math::fill(scale,DUMMY_VAR__);
            stan::math::assign(scale,standard_normal_to_lognormal(scale_star,get_base1(scale_mu_sigma,1,"scale_mu_sigma",1),get_base1(scale_mu_sigma,2,"scale_mu_sigma",1), pstream__));
            current_statement_begin__ = 156;
            local_scalar_t__ epsilon;
            (void) epsilon;  // dummy to suppress unused var warning

            stan::math::initialize(epsilon, DUMMY_VAR__);
            stan::math::fill(epsilon,DUMMY_VAR__);
            stan::math::assign(epsilon,standard_normal_to_lognormal(epsilon_star,get_base1(epsilon_mu_sigma,1,"epsilon_mu_sigma",1),get_base1(epsilon_mu_sigma,2,"epsilon_mu_sigma",1), pstream__));
            current_statement_begin__ = 157;
            local_scalar_t__ sigma;
            (void) sigma;  // dummy to suppress unused var warning

            stan::math::initialize(sigma, DUMMY_VAR__);
            stan::math::fill(sigma,DUMMY_VAR__);
            stan::math::assign(sigma,standard_normal_to_lognormal(sigma_star,get_base1(sigma_mu_sigma,1,"sigma_mu_sigma",1),get_base1(sigma_mu_sigma,2,"sigma_mu_sigma",1), pstream__));
            current_statement_begin__ = 158;
            local_scalar_t__ tau1;
            (void) tau1;  // dummy to suppress unused var warning

            stan::math::initialize(tau1, DUMMY_VAR__);
            stan::math::fill(tau1,DUMMY_VAR__);
            stan::math::assign(tau1,standard_normal_to_lognormal(tau1_star,get_base1(tau1_mu_sigma,1,"tau1_mu_sigma",1),get_base1(tau1_mu_sigma,2,"tau1_mu_sigma",1), pstream__));
            current_statement_begin__ = 160;
            validate_non_negative_index("x0", "n_active_regions", n_active_regions);
            Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  x0(static_cast<Eigen::VectorXd::Index>(n_active_regions));
            (void) x0;  // dummy to suppress unused var warning

            stan::math::initialize(x0, DUMMY_VAR__);
            stan::math::fill(x0,DUMMY_VAR__);
            stan::math::assign(x0,subtract(x0_hi,standard_normal_to_lognormal_row(x0_star,x0_logmu,x0_sigma, pstream__)));
            current_statement_begin__ = 161;
            validate_non_negative_index("x1_init", "n_active_regions", n_active_regions);
            Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  x1_init(static_cast<Eigen::VectorXd::Index>(n_active_regions));
            (void) x1_init;  // dummy to suppress unused var warning

            stan::math::initialize(x1_init, DUMMY_VAR__);
            stan::math::fill(x1_init,DUMMY_VAR__);
            stan::math::assign(x1_init,add(x1_init_mu,multiply(x1_init_star,x1_init_std)));
            current_statement_begin__ = 162;
            validate_non_negative_index("z_init", "n_active_regions", n_active_regions);
            Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  z_init(static_cast<Eigen::VectorXd::Index>(n_active_regions));
            (void) z_init;  // dummy to suppress unused var warning

            stan::math::initialize(z_init, DUMMY_VAR__);
            stan::math::fill(z_init,DUMMY_VAR__);
            stan::math::assign(z_init,add(z_init_mu,multiply(z_init_star,z_init_std)));
            current_statement_begin__ = 163;
            validate_non_negative_index("x1", "n_active_regions", n_active_regions);
            validate_non_negative_index("x1", "n_times", n_times);
            vector<Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic> > x1(n_times, (Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(n_active_regions))));
            stan::math::initialize(x1, DUMMY_VAR__);
            stan::math::fill(x1,DUMMY_VAR__);
            current_statement_begin__ = 164;
            validate_non_negative_index("z", "n_active_regions", n_active_regions);
            validate_non_negative_index("z", "n_times", n_times);
            vector<Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic> > z(n_times, (Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(n_active_regions))));
            stan::math::initialize(z, DUMMY_VAR__);
            stan::math::fill(z,DUMMY_VAR__);
            current_statement_begin__ = 165;
            validate_non_negative_index("fit_target_data", "n_target_data", n_target_data);
            validate_non_negative_index("fit_target_data", "n_times", n_times);
            vector<Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic> > fit_target_data(n_times, (Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(n_target_data))));
            stan::math::initialize(fit_target_data, DUMMY_VAR__);
            stan::math::fill(fit_target_data,DUMMY_VAR__);


            current_statement_begin__ = 167;
            stan::math::assign(get_base1_lhs(x1,1,"x1",1), x1_init);
            current_statement_begin__ = 168;
            stan::math::assign(get_base1_lhs(z,1,"z",1), z_init);
            current_statement_begin__ = 169;
            for (int t = 1; t <= (n_times - 1); ++t) {

                current_statement_begin__ = 170;
                stan::math::assign(get_base1_lhs(x1,(t + 1),"x1",1), x1_step(get_base1(x1,t,"x1",1),get_base1(z,t,"z",1),Iext1,(dt * tau1), pstream__));
                current_statement_begin__ = 171;
                stan::math::assign(get_base1_lhs(z,(t + 1),"z",1), z_step(get_base1(x1,t,"x1",1),get_base1(z,t,"z",1),x0,multiply(K,SC),Ic,x1_eq_def,(dt * tau1),get_base1(dZt_star,t,"dZt_star",1),(sqrtdt * sigma),tau0, pstream__));
            }
            current_statement_begin__ = 174;
            if (as_bool(logical_gt(log_target_data,0))) {

                current_statement_begin__ = 175;
                for (int t = 1; t <= n_times; ++t) {
                    current_statement_begin__ = 176;
                    stan::math::assign(get_base1_lhs(fit_target_data,t,"fit_target_data",1), multiply(scale,transpose(add(stan::math::log(multiply(gain,stan::math::exp(subtract(transpose(get_base1(x1,t,"x1",1)),x1_eq_def)))),offset))));
                }
            } else {

                current_statement_begin__ = 178;
                for (int t = 1; t <= n_times; ++t) {
                    current_statement_begin__ = 179;
                    stan::math::assign(get_base1_lhs(fit_target_data,t,"fit_target_data",1), multiply(scale,transpose(add(multiply(gain,subtract(transpose(get_base1(x1,t,"x1",1)),x1_eq_def)),offset))));
                }
            }

            // validate transformed parameters
            current_statement_begin__ = 154;
            current_statement_begin__ = 155;
            current_statement_begin__ = 156;
            current_statement_begin__ = 157;
            current_statement_begin__ = 158;
            current_statement_begin__ = 160;
            current_statement_begin__ = 161;
            current_statement_begin__ = 162;
            current_statement_begin__ = 163;
            current_statement_begin__ = 164;
            current_statement_begin__ = 165;

            // write transformed parameters
            if (include_tparams__) {
        vars__.push_back(offset);
        vars__.push_back(scale);
        vars__.push_back(epsilon);
        vars__.push_back(sigma);
        vars__.push_back(tau1);
            for (int k_0__ = 0; k_0__ < n_active_regions; ++k_0__) {
            vars__.push_back(x0[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < n_active_regions; ++k_0__) {
            vars__.push_back(x1_init[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < n_active_regions; ++k_0__) {
            vars__.push_back(z_init[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < n_active_regions; ++k_1__) {
                for (int k_0__ = 0; k_0__ < n_times; ++k_0__) {
                vars__.push_back(x1[k_0__][k_1__]);
                }
            }
            for (int k_1__ = 0; k_1__ < n_active_regions; ++k_1__) {
                for (int k_0__ = 0; k_0__ < n_times; ++k_0__) {
                vars__.push_back(z[k_0__][k_1__]);
                }
            }
            for (int k_1__ = 0; k_1__ < n_target_data; ++k_1__) {
                for (int k_0__ = 0; k_0__ < n_times; ++k_0__) {
                vars__.push_back(fit_target_data[k_0__][k_1__]);
                }
            }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 216;
            validate_non_negative_index("log_likelihood", "n_target_data", n_target_data);
            validate_non_negative_index("log_likelihood", "n_times", n_times);
            vector<Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic> > log_likelihood(n_times, (Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(n_target_data))));
            stan::math::initialize(log_likelihood, DUMMY_VAR__);
            stan::math::fill(log_likelihood,DUMMY_VAR__);


            current_statement_begin__ = 217;
            for (int t = 1; t <= n_times; ++t) {

                current_statement_begin__ = 218;
                for (int s = 1; s <= n_target_data; ++s) {

                    current_statement_begin__ = 219;
                    stan::math::assign(get_base1_lhs(get_base1_lhs(log_likelihood,t,"log_likelihood",1),s,"log_likelihood",2), normal_log(get_base1(get_base1(target_data,t,"target_data",1),s,"target_data",2),get_base1(get_base1(fit_target_data,t,"fit_target_data",1),s,"fit_target_data",2),epsilon));
                }
            }

            // validate generated quantities
            current_statement_begin__ = 216;

            // write generated quantities
            for (int k_1__ = 0; k_1__ < n_target_data; ++k_1__) {
                for (int k_0__ = 0; k_0__ < n_times; ++k_0__) {
                vars__.push_back(log_likelihood[k_0__][k_1__]);
                }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "vep_sde_simple_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= n_active_regions; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "x0_star" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "epsilon_star";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "scale_star";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "offset_star";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_star";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau1_star";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= n_active_regions; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "x1_init_star" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_active_regions; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_init_star" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= n_active_regions; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (n_times - 1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "dZt_star" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "offset";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "scale";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "epsilon";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau1";
            param_names__.push_back(param_name_stream__.str());
            for (int k_0__ = 1; k_0__ <= n_active_regions; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "x0" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= n_active_regions; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "x1_init" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= n_active_regions; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z_init" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_1__ = 1; k_1__ <= n_active_regions; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= n_times; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "x1" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= n_active_regions; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= n_times; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "z" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= n_target_data; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= n_times; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "fit_target_data" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }


        if (!include_gqs__) return;
        for (int k_1__ = 1; k_1__ <= n_target_data; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_times; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_likelihood" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= n_active_regions; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "x0_star" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "epsilon_star";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "scale_star";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "offset_star";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_star";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau1_star";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= n_active_regions; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "x1_init_star" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_active_regions; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_init_star" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= n_active_regions; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (n_times - 1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "dZt_star" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "offset";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "scale";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "epsilon";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau1";
            param_names__.push_back(param_name_stream__.str());
            for (int k_0__ = 1; k_0__ <= n_active_regions; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "x0" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= n_active_regions; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "x1_init" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= n_active_regions; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z_init" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_1__ = 1; k_1__ <= n_active_regions; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= n_times; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "x1" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= n_active_regions; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= n_times; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "z" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= n_target_data; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= n_times; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "fit_target_data" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }


        if (!include_gqs__) return;
        for (int k_1__ = 1; k_1__ <= n_target_data; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_times; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_likelihood" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }

}; // model

}

typedef vep_sde_simple_model_namespace::vep_sde_simple_model stan_model;

