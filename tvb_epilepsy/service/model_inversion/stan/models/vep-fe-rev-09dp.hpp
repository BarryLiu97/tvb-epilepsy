// Code generated by Stan version 2.17.1

#include <stan/model/model_header.hpp>

namespace vep_fe_rev_09dp_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "/Users/dionperd/VEPtools/software/git/tvb-epilepsy/tvb_epilepsy/service/model_inversion/stan/models/vep-fe-rev-09dp.stan");
    reader.add_event(155, 155, "end", "/Users/dionperd/VEPtools/software/git/tvb-epilepsy/tvb_epilepsy/service/model_inversion/stan/models/vep-fe-rev-09dp.stan");
    return reader;
}

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,Eigen::Dynamic>
vector_differencing(const Eigen::Matrix<T0__, 1,Eigen::Dynamic>& x, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 4;
        validate_non_negative_index("D", "num_elements(x)", num_elements(x));
        validate_non_negative_index("D", "num_elements(x)", num_elements(x));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  D(static_cast<Eigen::VectorXd::Index>(num_elements(x)),static_cast<Eigen::VectorXd::Index>(num_elements(x)));
        (void) D;  // dummy to suppress unused var warning

        stan::math::initialize(D, DUMMY_VAR__);
        stan::math::fill(D,DUMMY_VAR__);


        current_statement_begin__ = 5;
        for (int i = 1; i <= num_elements(x); ++i) {

            current_statement_begin__ = 6;
            stan::math::assign(get_base1_lhs(D,i,"D",1), subtract(x,get_base1(x,i,"x",1)));
        }
        current_statement_begin__ = 8;
        return stan::math::promote_scalar<fun_return_scalar_t__>(D);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct vector_differencing_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, 1,Eigen::Dynamic>& x, std::ostream* pstream__) const {
        return vector_differencing(x, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type, 1,Eigen::Dynamic>
x_step(const Eigen::Matrix<T0__, 1,Eigen::Dynamic>& x,
           const Eigen::Matrix<T1__, 1,Eigen::Dynamic>& z,
           const T2__& I1,
           const T3__& time_scale,
           const Eigen::Matrix<T4__, 1,Eigen::Dynamic>& x_eta,
           const T5__& sigma, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 12;
        int nn(0);
        (void) nn;  // dummy to suppress unused var warning

        stan::math::fill(nn, std::numeric_limits<int>::min());
        stan::math::assign(nn,num_elements(x));
        current_statement_begin__ = 13;
        validate_non_negative_index("x_next", "nn", nn);
        Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  x_next(static_cast<Eigen::VectorXd::Index>(nn));
        (void) x_next;  // dummy to suppress unused var warning

        stan::math::initialize(x_next, DUMMY_VAR__);
        stan::math::fill(x_next,DUMMY_VAR__);
        current_statement_begin__ = 14;
        validate_non_negative_index("I1_vec", "nn", nn);
        Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  I1_vec(static_cast<Eigen::VectorXd::Index>(nn));
        (void) I1_vec;  // dummy to suppress unused var warning

        stan::math::initialize(I1_vec, DUMMY_VAR__);
        stan::math::fill(I1_vec,DUMMY_VAR__);
        stan::math::assign(I1_vec,rep_row_vector((I1 + 1.0),nn));
        current_statement_begin__ = 15;
        validate_non_negative_index("dx", "nn", nn);
        Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  dx(static_cast<Eigen::VectorXd::Index>(nn));
        (void) dx;  // dummy to suppress unused var warning

        stan::math::initialize(dx, DUMMY_VAR__);
        stan::math::fill(dx,DUMMY_VAR__);
        stan::math::assign(dx,subtract(subtract(subtract(I1_vec,elt_multiply(elt_multiply(x,x),x)),multiply(2.0,elt_multiply(x,x))),z));


        current_statement_begin__ = 16;
        stan::math::assign(x_next, add(add(x,multiply(time_scale,dx)),multiply(x_eta,sigma)));
        current_statement_begin__ = 17;
        return stan::math::promote_scalar<fun_return_scalar_t__>(x_next);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct x_step_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type, 1,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, 1,Eigen::Dynamic>& x,
           const Eigen::Matrix<T1__, 1,Eigen::Dynamic>& z,
           const T2__& I1,
           const T3__& time_scale,
           const Eigen::Matrix<T4__, 1,Eigen::Dynamic>& x_eta,
           const T5__& sigma, std::ostream* pstream__) const {
        return x_step(x, z, I1, time_scale, x_eta, sigma, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__>::type>::type>::type, 1,Eigen::Dynamic>
z_step(const Eigen::Matrix<T0__, 1,Eigen::Dynamic>& x,
           const Eigen::Matrix<T1__, 1,Eigen::Dynamic>& z,
           const Eigen::Matrix<T2__, 1,Eigen::Dynamic>& x0,
           const Eigen::Matrix<T3__, Eigen::Dynamic,Eigen::Dynamic>& FC,
           const Eigen::Matrix<T4__, Eigen::Dynamic,1>& Ic,
           const T5__& x_eq_def,
           const T6__& time_scale,
           const Eigen::Matrix<T7__, 1,Eigen::Dynamic>& z_eta,
           const T8__& sigma,
           const T9__& tau0, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 22;
        int nn(0);
        (void) nn;  // dummy to suppress unused var warning

        stan::math::fill(nn, std::numeric_limits<int>::min());
        stan::math::assign(nn,num_elements(z));
        current_statement_begin__ = 23;
        validate_non_negative_index("z_next", "nn", nn);
        Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  z_next(static_cast<Eigen::VectorXd::Index>(nn));
        (void) z_next;  // dummy to suppress unused var warning

        stan::math::initialize(z_next, DUMMY_VAR__);
        stan::math::fill(z_next,DUMMY_VAR__);
        current_statement_begin__ = 24;
        validate_non_negative_index("D", "nn", nn);
        validate_non_negative_index("D", "nn", nn);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  D(static_cast<Eigen::VectorXd::Index>(nn),static_cast<Eigen::VectorXd::Index>(nn));
        (void) D;  // dummy to suppress unused var warning

        stan::math::initialize(D, DUMMY_VAR__);
        stan::math::fill(D,DUMMY_VAR__);
        stan::math::assign(D,vector_differencing(x, pstream__));
        current_statement_begin__ = 27;
        validate_non_negative_index("gx", "nn", nn);
        Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  gx(static_cast<Eigen::VectorXd::Index>(nn));
        (void) gx;  // dummy to suppress unused var warning

        stan::math::initialize(gx, DUMMY_VAR__);
        stan::math::fill(gx,DUMMY_VAR__);
        stan::math::assign(gx,to_row_vector(add(rows_dot_product(FC,D),elt_multiply(Ic,to_vector(subtract(x_eq_def,x))))));
        current_statement_begin__ = 28;
        validate_non_negative_index("dz", "nn", nn);
        Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  dz(static_cast<Eigen::VectorXd::Index>(nn));
        (void) dz;  // dummy to suppress unused var warning

        stan::math::initialize(dz, DUMMY_VAR__);
        stan::math::fill(dz,DUMMY_VAR__);
        stan::math::assign(dz,multiply(inv(tau0),subtract(subtract(multiply(4,subtract(x,x0)),z),gx)));


        current_statement_begin__ = 29;
        stan::math::assign(z_next, add(add(z,multiply(time_scale,dz)),multiply(z_eta,sigma)));
        current_statement_begin__ = 30;
        return stan::math::promote_scalar<fun_return_scalar_t__>(z_next);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct z_step_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__>::type>::type>::type, 1,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, 1,Eigen::Dynamic>& x,
           const Eigen::Matrix<T1__, 1,Eigen::Dynamic>& z,
           const Eigen::Matrix<T2__, 1,Eigen::Dynamic>& x0,
           const Eigen::Matrix<T3__, Eigen::Dynamic,Eigen::Dynamic>& FC,
           const Eigen::Matrix<T4__, Eigen::Dynamic,1>& Ic,
           const T5__& x_eq_def,
           const T6__& time_scale,
           const Eigen::Matrix<T7__, 1,Eigen::Dynamic>& z_eta,
           const T8__& sigma,
           const T9__& tau0, std::ostream* pstream__) const {
        return z_step(x, z, x0, FC, Ic, x_eq_def, time_scale, z_eta, sigma, tau0, pstream__);
    }
};

class vep_fe_rev_09dp_model : public prob_grad {
private:
    int DEBUG;
    int SIMULATE;
    int nn;
    int nt;
    int ns;
    double I1;
    double tau0;
    double dt;
    double x0_hi;
    row_vector_d x0_star_mu;
    row_vector_d x0_star_std;
    double x_eq_def;
    row_vector_d x_init_mu;
    row_vector_d z_init_mu;
    double x_init_std;
    double z_init_std;
    double time_scale_mu;
    double time_scale_std;
    double k_mu;
    double k_std;
    double sigma_mu;
    double sigma_std;
    double epsilon_mu;
    double epsilon_std;
    double offset_mu;
    double offset_std;
    double amplitude_mu;
    double amplitude_std;
    double amplitude_lo;
    matrix_d gain;
    vector<row_vector_d> seeg_log_power;
    vector_d Ic;
    matrix_d SC;
    double sqrtdt;
    double time_scale_zscore;
    double k_zscore;
    double amplitude_zscore;
    double epsilon_zscore;
    double sigma_zscore;
    row_vector_d x0_star_zscore;
    matrix_d SC_;
public:
    vep_fe_rev_09dp_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    vep_fe_rev_09dp_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "vep_fe_rev_09dp_model_namespace::vep_fe_rev_09dp_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 35;
            context__.validate_dims("data initialization", "DEBUG", "int", context__.to_vec());
            DEBUG = int(0);
            vals_i__ = context__.vals_i("DEBUG");
            pos__ = 0;
            DEBUG = vals_i__[pos__++];
            current_statement_begin__ = 36;
            context__.validate_dims("data initialization", "SIMULATE", "int", context__.to_vec());
            SIMULATE = int(0);
            vals_i__ = context__.vals_i("SIMULATE");
            pos__ = 0;
            SIMULATE = vals_i__[pos__++];
            current_statement_begin__ = 37;
            context__.validate_dims("data initialization", "nn", "int", context__.to_vec());
            nn = int(0);
            vals_i__ = context__.vals_i("nn");
            pos__ = 0;
            nn = vals_i__[pos__++];
            current_statement_begin__ = 38;
            context__.validate_dims("data initialization", "nt", "int", context__.to_vec());
            nt = int(0);
            vals_i__ = context__.vals_i("nt");
            pos__ = 0;
            nt = vals_i__[pos__++];
            current_statement_begin__ = 39;
            context__.validate_dims("data initialization", "ns", "int", context__.to_vec());
            ns = int(0);
            vals_i__ = context__.vals_i("ns");
            pos__ = 0;
            ns = vals_i__[pos__++];
            current_statement_begin__ = 40;
            context__.validate_dims("data initialization", "I1", "double", context__.to_vec());
            I1 = double(0);
            vals_r__ = context__.vals_r("I1");
            pos__ = 0;
            I1 = vals_r__[pos__++];
            current_statement_begin__ = 41;
            context__.validate_dims("data initialization", "tau0", "double", context__.to_vec());
            tau0 = double(0);
            vals_r__ = context__.vals_r("tau0");
            pos__ = 0;
            tau0 = vals_r__[pos__++];
            current_statement_begin__ = 42;
            context__.validate_dims("data initialization", "dt", "double", context__.to_vec());
            dt = double(0);
            vals_r__ = context__.vals_r("dt");
            pos__ = 0;
            dt = vals_r__[pos__++];
            current_statement_begin__ = 43;
            context__.validate_dims("data initialization", "x0_hi", "double", context__.to_vec());
            x0_hi = double(0);
            vals_r__ = context__.vals_r("x0_hi");
            pos__ = 0;
            x0_hi = vals_r__[pos__++];
            current_statement_begin__ = 46;
            validate_non_negative_index("x0_star_mu", "nn", nn);
            context__.validate_dims("data initialization", "x0_star_mu", "row_vector_d", context__.to_vec(nn));
            validate_non_negative_index("x0_star_mu", "nn", nn);
            x0_star_mu = row_vector_d(static_cast<Eigen::VectorXd::Index>(nn));
            vals_r__ = context__.vals_r("x0_star_mu");
            pos__ = 0;
            size_t x0_star_mu_i_vec_lim__ = nn;
            for (size_t i_vec__ = 0; i_vec__ < x0_star_mu_i_vec_lim__; ++i_vec__) {
                x0_star_mu[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 47;
            validate_non_negative_index("x0_star_std", "nn", nn);
            context__.validate_dims("data initialization", "x0_star_std", "row_vector_d", context__.to_vec(nn));
            validate_non_negative_index("x0_star_std", "nn", nn);
            x0_star_std = row_vector_d(static_cast<Eigen::VectorXd::Index>(nn));
            vals_r__ = context__.vals_r("x0_star_std");
            pos__ = 0;
            size_t x0_star_std_i_vec_lim__ = nn;
            for (size_t i_vec__ = 0; i_vec__ < x0_star_std_i_vec_lim__; ++i_vec__) {
                x0_star_std[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 49;
            context__.validate_dims("data initialization", "x_eq_def", "double", context__.to_vec());
            x_eq_def = double(0);
            vals_r__ = context__.vals_r("x_eq_def");
            pos__ = 0;
            x_eq_def = vals_r__[pos__++];
            current_statement_begin__ = 50;
            validate_non_negative_index("x_init_mu", "nn", nn);
            context__.validate_dims("data initialization", "x_init_mu", "row_vector_d", context__.to_vec(nn));
            validate_non_negative_index("x_init_mu", "nn", nn);
            x_init_mu = row_vector_d(static_cast<Eigen::VectorXd::Index>(nn));
            vals_r__ = context__.vals_r("x_init_mu");
            pos__ = 0;
            size_t x_init_mu_i_vec_lim__ = nn;
            for (size_t i_vec__ = 0; i_vec__ < x_init_mu_i_vec_lim__; ++i_vec__) {
                x_init_mu[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 51;
            validate_non_negative_index("z_init_mu", "nn", nn);
            context__.validate_dims("data initialization", "z_init_mu", "row_vector_d", context__.to_vec(nn));
            validate_non_negative_index("z_init_mu", "nn", nn);
            z_init_mu = row_vector_d(static_cast<Eigen::VectorXd::Index>(nn));
            vals_r__ = context__.vals_r("z_init_mu");
            pos__ = 0;
            size_t z_init_mu_i_vec_lim__ = nn;
            for (size_t i_vec__ = 0; i_vec__ < z_init_mu_i_vec_lim__; ++i_vec__) {
                z_init_mu[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 52;
            context__.validate_dims("data initialization", "x_init_std", "double", context__.to_vec());
            x_init_std = double(0);
            vals_r__ = context__.vals_r("x_init_std");
            pos__ = 0;
            x_init_std = vals_r__[pos__++];
            current_statement_begin__ = 53;
            context__.validate_dims("data initialization", "z_init_std", "double", context__.to_vec());
            z_init_std = double(0);
            vals_r__ = context__.vals_r("z_init_std");
            pos__ = 0;
            z_init_std = vals_r__[pos__++];
            current_statement_begin__ = 54;
            context__.validate_dims("data initialization", "time_scale_mu", "double", context__.to_vec());
            time_scale_mu = double(0);
            vals_r__ = context__.vals_r("time_scale_mu");
            pos__ = 0;
            time_scale_mu = vals_r__[pos__++];
            current_statement_begin__ = 55;
            context__.validate_dims("data initialization", "time_scale_std", "double", context__.to_vec());
            time_scale_std = double(0);
            vals_r__ = context__.vals_r("time_scale_std");
            pos__ = 0;
            time_scale_std = vals_r__[pos__++];
            current_statement_begin__ = 56;
            context__.validate_dims("data initialization", "k_mu", "double", context__.to_vec());
            k_mu = double(0);
            vals_r__ = context__.vals_r("k_mu");
            pos__ = 0;
            k_mu = vals_r__[pos__++];
            current_statement_begin__ = 57;
            context__.validate_dims("data initialization", "k_std", "double", context__.to_vec());
            k_std = double(0);
            vals_r__ = context__.vals_r("k_std");
            pos__ = 0;
            k_std = vals_r__[pos__++];
            current_statement_begin__ = 58;
            context__.validate_dims("data initialization", "sigma_mu", "double", context__.to_vec());
            sigma_mu = double(0);
            vals_r__ = context__.vals_r("sigma_mu");
            pos__ = 0;
            sigma_mu = vals_r__[pos__++];
            current_statement_begin__ = 59;
            context__.validate_dims("data initialization", "sigma_std", "double", context__.to_vec());
            sigma_std = double(0);
            vals_r__ = context__.vals_r("sigma_std");
            pos__ = 0;
            sigma_std = vals_r__[pos__++];
            current_statement_begin__ = 60;
            context__.validate_dims("data initialization", "epsilon_mu", "double", context__.to_vec());
            epsilon_mu = double(0);
            vals_r__ = context__.vals_r("epsilon_mu");
            pos__ = 0;
            epsilon_mu = vals_r__[pos__++];
            current_statement_begin__ = 61;
            context__.validate_dims("data initialization", "epsilon_std", "double", context__.to_vec());
            epsilon_std = double(0);
            vals_r__ = context__.vals_r("epsilon_std");
            pos__ = 0;
            epsilon_std = vals_r__[pos__++];
            current_statement_begin__ = 62;
            context__.validate_dims("data initialization", "offset_mu", "double", context__.to_vec());
            offset_mu = double(0);
            vals_r__ = context__.vals_r("offset_mu");
            pos__ = 0;
            offset_mu = vals_r__[pos__++];
            current_statement_begin__ = 63;
            context__.validate_dims("data initialization", "offset_std", "double", context__.to_vec());
            offset_std = double(0);
            vals_r__ = context__.vals_r("offset_std");
            pos__ = 0;
            offset_std = vals_r__[pos__++];
            current_statement_begin__ = 64;
            context__.validate_dims("data initialization", "amplitude_mu", "double", context__.to_vec());
            amplitude_mu = double(0);
            vals_r__ = context__.vals_r("amplitude_mu");
            pos__ = 0;
            amplitude_mu = vals_r__[pos__++];
            current_statement_begin__ = 65;
            context__.validate_dims("data initialization", "amplitude_std", "double", context__.to_vec());
            amplitude_std = double(0);
            vals_r__ = context__.vals_r("amplitude_std");
            pos__ = 0;
            amplitude_std = vals_r__[pos__++];
            current_statement_begin__ = 66;
            context__.validate_dims("data initialization", "amplitude_lo", "double", context__.to_vec());
            amplitude_lo = double(0);
            vals_r__ = context__.vals_r("amplitude_lo");
            pos__ = 0;
            amplitude_lo = vals_r__[pos__++];
            current_statement_begin__ = 67;
            validate_non_negative_index("gain", "ns", ns);
            validate_non_negative_index("gain", "nn", nn);
            context__.validate_dims("data initialization", "gain", "matrix_d", context__.to_vec(ns,nn));
            validate_non_negative_index("gain", "ns", ns);
            validate_non_negative_index("gain", "nn", nn);
            gain = matrix_d(static_cast<Eigen::VectorXd::Index>(ns),static_cast<Eigen::VectorXd::Index>(nn));
            vals_r__ = context__.vals_r("gain");
            pos__ = 0;
            size_t gain_m_mat_lim__ = ns;
            size_t gain_n_mat_lim__ = nn;
            for (size_t n_mat__ = 0; n_mat__ < gain_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < gain_m_mat_lim__; ++m_mat__) {
                    gain(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 68;
            validate_non_negative_index("seeg_log_power", "nt", nt);
            validate_non_negative_index("seeg_log_power", "ns", ns);
            context__.validate_dims("data initialization", "seeg_log_power", "row_vector_d", context__.to_vec(nt,ns));
            validate_non_negative_index("seeg_log_power", "nt", nt);
            validate_non_negative_index("seeg_log_power", "ns", ns);
            seeg_log_power = std::vector<row_vector_d>(nt,row_vector_d(static_cast<Eigen::VectorXd::Index>(ns)));
            vals_r__ = context__.vals_r("seeg_log_power");
            pos__ = 0;
            size_t seeg_log_power_i_vec_lim__ = ns;
            for (size_t i_vec__ = 0; i_vec__ < seeg_log_power_i_vec_lim__; ++i_vec__) {
                size_t seeg_log_power_limit_0__ = nt;
                for (size_t i_0__ = 0; i_0__ < seeg_log_power_limit_0__; ++i_0__) {
                    seeg_log_power[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 69;
            validate_non_negative_index("Ic", "nn", nn);
            context__.validate_dims("data initialization", "Ic", "vector_d", context__.to_vec(nn));
            validate_non_negative_index("Ic", "nn", nn);
            Ic = vector_d(static_cast<Eigen::VectorXd::Index>(nn));
            vals_r__ = context__.vals_r("Ic");
            pos__ = 0;
            size_t Ic_i_vec_lim__ = nn;
            for (size_t i_vec__ = 0; i_vec__ < Ic_i_vec_lim__; ++i_vec__) {
                Ic[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 70;
            validate_non_negative_index("SC", "nn", nn);
            validate_non_negative_index("SC", "nn", nn);
            context__.validate_dims("data initialization", "SC", "matrix_d", context__.to_vec(nn,nn));
            validate_non_negative_index("SC", "nn", nn);
            validate_non_negative_index("SC", "nn", nn);
            SC = matrix_d(static_cast<Eigen::VectorXd::Index>(nn),static_cast<Eigen::VectorXd::Index>(nn));
            vals_r__ = context__.vals_r("SC");
            pos__ = 0;
            size_t SC_m_mat_lim__ = nn;
            size_t SC_n_mat_lim__ = nn;
            for (size_t n_mat__ = 0; n_mat__ < SC_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < SC_m_mat_lim__; ++m_mat__) {
                    SC(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }

            // validate, data variables
            current_statement_begin__ = 35;
            current_statement_begin__ = 36;
            current_statement_begin__ = 37;
            current_statement_begin__ = 38;
            current_statement_begin__ = 39;
            current_statement_begin__ = 40;
            current_statement_begin__ = 41;
            current_statement_begin__ = 42;
            current_statement_begin__ = 43;
            current_statement_begin__ = 46;
            current_statement_begin__ = 47;
            current_statement_begin__ = 49;
            current_statement_begin__ = 50;
            current_statement_begin__ = 51;
            current_statement_begin__ = 52;
            current_statement_begin__ = 53;
            current_statement_begin__ = 54;
            current_statement_begin__ = 55;
            current_statement_begin__ = 56;
            current_statement_begin__ = 57;
            current_statement_begin__ = 58;
            current_statement_begin__ = 59;
            current_statement_begin__ = 60;
            current_statement_begin__ = 61;
            current_statement_begin__ = 62;
            current_statement_begin__ = 63;
            current_statement_begin__ = 64;
            current_statement_begin__ = 65;
            current_statement_begin__ = 66;
            current_statement_begin__ = 67;
            current_statement_begin__ = 68;
            current_statement_begin__ = 69;
            current_statement_begin__ = 70;
            check_greater_or_equal(function__,"SC",SC,0.0);
            check_less_or_equal(function__,"SC",SC,1.0);
            // initialize data variables
            current_statement_begin__ = 74;
            sqrtdt = double(0);
            stan::math::fill(sqrtdt,DUMMY_VAR__);
            stan::math::assign(sqrtdt,stan::math::sqrt(dt));
            current_statement_begin__ = 75;
            time_scale_zscore = double(0);
            stan::math::fill(time_scale_zscore,DUMMY_VAR__);
            stan::math::assign(time_scale_zscore,(time_scale_std / time_scale_mu));
            current_statement_begin__ = 76;
            k_zscore = double(0);
            stan::math::fill(k_zscore,DUMMY_VAR__);
            stan::math::assign(k_zscore,(k_std / k_mu));
            current_statement_begin__ = 77;
            amplitude_zscore = double(0);
            stan::math::fill(amplitude_zscore,DUMMY_VAR__);
            stan::math::assign(amplitude_zscore,(amplitude_std / amplitude_mu));
            current_statement_begin__ = 78;
            epsilon_zscore = double(0);
            stan::math::fill(epsilon_zscore,DUMMY_VAR__);
            stan::math::assign(epsilon_zscore,(epsilon_std / epsilon_mu));
            current_statement_begin__ = 79;
            sigma_zscore = double(0);
            stan::math::fill(sigma_zscore,DUMMY_VAR__);
            stan::math::assign(sigma_zscore,(sigma_std / sigma_mu));
            current_statement_begin__ = 80;
            validate_non_negative_index("x0_star_zscore", "nn", nn);
            x0_star_zscore = row_vector_d(static_cast<Eigen::VectorXd::Index>(nn));
            stan::math::fill(x0_star_zscore,DUMMY_VAR__);
            stan::math::assign(x0_star_zscore,elt_divide(x0_star_std,x0_star_mu));
            current_statement_begin__ = 82;
            validate_non_negative_index("SC_", "nn", nn);
            validate_non_negative_index("SC_", "nn", nn);
            SC_ = matrix_d(static_cast<Eigen::VectorXd::Index>(nn),static_cast<Eigen::VectorXd::Index>(nn));
            stan::math::fill(SC_,DUMMY_VAR__);
            stan::math::assign(SC_,SC);

            current_statement_begin__ = 83;
            for (int i = 1; i <= nn; ++i) {
                current_statement_begin__ = 83;
                stan::math::assign(get_base1_lhs(SC_,i,i,"SC_",1), 0);
            }
            current_statement_begin__ = 84;
            stan::math::assign(SC_, multiply(divide(SC_,max(SC_)),rows(SC_)));

            // validate transformed data
            current_statement_begin__ = 74;
            current_statement_begin__ = 75;
            current_statement_begin__ = 76;
            current_statement_begin__ = 77;
            current_statement_begin__ = 78;
            current_statement_begin__ = 79;
            current_statement_begin__ = 80;
            current_statement_begin__ = 82;

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 89;
        validate_non_negative_index("x0_star", "nn", nn);
            num_params_r__ += nn;
            current_statement_begin__ = 90;
            ++num_params_r__;
            current_statement_begin__ = 91;
            ++num_params_r__;
            current_statement_begin__ = 92;
            ++num_params_r__;
            current_statement_begin__ = 93;
            ++num_params_r__;
            current_statement_begin__ = 96;
        validate_non_negative_index("x_init", "nn", nn);
            num_params_r__ += nn;
            current_statement_begin__ = 97;
        validate_non_negative_index("z_init", "nn", nn);
            num_params_r__ += nn;
            current_statement_begin__ = 98;
        validate_non_negative_index("x_eta", "nn", nn);
            validate_non_negative_index("x_eta", "(nt - 1)", (nt - 1));
            num_params_r__ += nn * (nt - 1);
            current_statement_begin__ = 99;
        validate_non_negative_index("z_eta", "nn", nn);
            validate_non_negative_index("z_eta", "(nt - 1)", (nt - 1));
            num_params_r__ += nn * (nt - 1);
            current_statement_begin__ = 100;
            ++num_params_r__;
            current_statement_begin__ = 101;
            ++num_params_r__;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~vep_fe_rev_09dp_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("x0_star")))
            throw std::runtime_error("variable x0_star missing");
        vals_r__ = context__.vals_r("x0_star");
        pos__ = 0U;
        validate_non_negative_index("x0_star", "nn", nn);
        context__.validate_dims("initialization", "x0_star", "row_vector_d", context__.to_vec(nn));
        row_vector_d x0_star(static_cast<Eigen::VectorXd::Index>(nn));
        for (int j1__ = 0U; j1__ < nn; ++j1__)
            x0_star(j1__) = vals_r__[pos__++];
        try {
            writer__.row_vector_ub_unconstrain(3.0,x0_star);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable x0_star: ") + e.what());
        }

        if (!(context__.contains_r("epsilon_star")))
            throw std::runtime_error("variable epsilon_star missing");
        vals_r__ = context__.vals_r("epsilon_star");
        pos__ = 0U;
        context__.validate_dims("initialization", "epsilon_star", "double", context__.to_vec());
        double epsilon_star(0);
        epsilon_star = vals_r__[pos__++];
        try {
            writer__.scalar_ub_unconstrain(3.0,epsilon_star);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable epsilon_star: ") + e.what());
        }

        if (!(context__.contains_r("amplitude_star")))
            throw std::runtime_error("variable amplitude_star missing");
        vals_r__ = context__.vals_r("amplitude_star");
        pos__ = 0U;
        context__.validate_dims("initialization", "amplitude_star", "double", context__.to_vec());
        double amplitude_star(0);
        amplitude_star = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(-(3.0),3.0,amplitude_star);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable amplitude_star: ") + e.what());
        }

        if (!(context__.contains_r("offset")))
            throw std::runtime_error("variable offset missing");
        vals_r__ = context__.vals_r("offset");
        pos__ = 0U;
        context__.validate_dims("initialization", "offset", "double", context__.to_vec());
        double offset(0);
        offset = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(-(1.0),1.0,offset);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable offset: ") + e.what());
        }

        if (!(context__.contains_r("time_scale_star")))
            throw std::runtime_error("variable time_scale_star missing");
        vals_r__ = context__.vals_r("time_scale_star");
        pos__ = 0U;
        context__.validate_dims("initialization", "time_scale_star", "double", context__.to_vec());
        double time_scale_star(0);
        time_scale_star = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(-(3.0),3.0,time_scale_star);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable time_scale_star: ") + e.what());
        }

        if (!(context__.contains_r("x_init")))
            throw std::runtime_error("variable x_init missing");
        vals_r__ = context__.vals_r("x_init");
        pos__ = 0U;
        validate_non_negative_index("x_init", "nn", nn);
        context__.validate_dims("initialization", "x_init", "row_vector_d", context__.to_vec(nn));
        row_vector_d x_init(static_cast<Eigen::VectorXd::Index>(nn));
        for (int j1__ = 0U; j1__ < nn; ++j1__)
            x_init(j1__) = vals_r__[pos__++];
        try {
            writer__.row_vector_unconstrain(x_init);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable x_init: ") + e.what());
        }

        if (!(context__.contains_r("z_init")))
            throw std::runtime_error("variable z_init missing");
        vals_r__ = context__.vals_r("z_init");
        pos__ = 0U;
        validate_non_negative_index("z_init", "nn", nn);
        context__.validate_dims("initialization", "z_init", "row_vector_d", context__.to_vec(nn));
        row_vector_d z_init(static_cast<Eigen::VectorXd::Index>(nn));
        for (int j1__ = 0U; j1__ < nn; ++j1__)
            z_init(j1__) = vals_r__[pos__++];
        try {
            writer__.row_vector_unconstrain(z_init);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_init: ") + e.what());
        }

        if (!(context__.contains_r("x_eta")))
            throw std::runtime_error("variable x_eta missing");
        vals_r__ = context__.vals_r("x_eta");
        pos__ = 0U;
        validate_non_negative_index("x_eta", "(nt - 1)", (nt - 1));
        validate_non_negative_index("x_eta", "nn", nn);
        context__.validate_dims("initialization", "x_eta", "row_vector_d", context__.to_vec((nt - 1),nn));
        std::vector<row_vector_d> x_eta((nt - 1),row_vector_d(static_cast<Eigen::VectorXd::Index>(nn)));
        for (int j1__ = 0U; j1__ < nn; ++j1__)
            for (int i0__ = 0U; i0__ < (nt - 1); ++i0__)
                x_eta[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < (nt - 1); ++i0__)
            try {
            writer__.row_vector_unconstrain(x_eta[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable x_eta: ") + e.what());
        }

        if (!(context__.contains_r("z_eta")))
            throw std::runtime_error("variable z_eta missing");
        vals_r__ = context__.vals_r("z_eta");
        pos__ = 0U;
        validate_non_negative_index("z_eta", "(nt - 1)", (nt - 1));
        validate_non_negative_index("z_eta", "nn", nn);
        context__.validate_dims("initialization", "z_eta", "row_vector_d", context__.to_vec((nt - 1),nn));
        std::vector<row_vector_d> z_eta((nt - 1),row_vector_d(static_cast<Eigen::VectorXd::Index>(nn)));
        for (int j1__ = 0U; j1__ < nn; ++j1__)
            for (int i0__ = 0U; i0__ < (nt - 1); ++i0__)
                z_eta[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < (nt - 1); ++i0__)
            try {
            writer__.row_vector_unconstrain(z_eta[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_eta: ") + e.what());
        }

        if (!(context__.contains_r("sigma_star")))
            throw std::runtime_error("variable sigma_star missing");
        vals_r__ = context__.vals_r("sigma_star");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma_star", "double", context__.to_vec());
        double sigma_star(0);
        sigma_star = vals_r__[pos__++];
        try {
            writer__.scalar_ub_unconstrain(3.0,sigma_star);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma_star: ") + e.what());
        }

        if (!(context__.contains_r("k_star")))
            throw std::runtime_error("variable k_star missing");
        vals_r__ = context__.vals_r("k_star");
        pos__ = 0U;
        context__.validate_dims("initialization", "k_star", "double", context__.to_vec());
        double k_star(0);
        k_star = vals_r__[pos__++];
        try {
            writer__.scalar_ub_unconstrain(3.0,k_star);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable k_star: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  x0_star;
            (void) x0_star;  // dummy to suppress unused var warning
            if (jacobian__)
                x0_star = in__.row_vector_ub_constrain(3.0,nn,lp__);
            else
                x0_star = in__.row_vector_ub_constrain(3.0,nn);

            local_scalar_t__ epsilon_star;
            (void) epsilon_star;  // dummy to suppress unused var warning
            if (jacobian__)
                epsilon_star = in__.scalar_ub_constrain(3.0,lp__);
            else
                epsilon_star = in__.scalar_ub_constrain(3.0);

            local_scalar_t__ amplitude_star;
            (void) amplitude_star;  // dummy to suppress unused var warning
            if (jacobian__)
                amplitude_star = in__.scalar_lub_constrain(-(3.0),3.0,lp__);
            else
                amplitude_star = in__.scalar_lub_constrain(-(3.0),3.0);

            local_scalar_t__ offset;
            (void) offset;  // dummy to suppress unused var warning
            if (jacobian__)
                offset = in__.scalar_lub_constrain(-(1.0),1.0,lp__);
            else
                offset = in__.scalar_lub_constrain(-(1.0),1.0);

            local_scalar_t__ time_scale_star;
            (void) time_scale_star;  // dummy to suppress unused var warning
            if (jacobian__)
                time_scale_star = in__.scalar_lub_constrain(-(3.0),3.0,lp__);
            else
                time_scale_star = in__.scalar_lub_constrain(-(3.0),3.0);

            Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  x_init;
            (void) x_init;  // dummy to suppress unused var warning
            if (jacobian__)
                x_init = in__.row_vector_constrain(nn,lp__);
            else
                x_init = in__.row_vector_constrain(nn);

            Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  z_init;
            (void) z_init;  // dummy to suppress unused var warning
            if (jacobian__)
                z_init = in__.row_vector_constrain(nn,lp__);
            else
                z_init = in__.row_vector_constrain(nn);

            vector<Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic> > x_eta;
            size_t dim_x_eta_0__ = (nt - 1);
            x_eta.reserve(dim_x_eta_0__);
            for (size_t k_0__ = 0; k_0__ < dim_x_eta_0__; ++k_0__) {
                if (jacobian__)
                    x_eta.push_back(in__.row_vector_constrain(nn,lp__));
                else
                    x_eta.push_back(in__.row_vector_constrain(nn));
            }

            vector<Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic> > z_eta;
            size_t dim_z_eta_0__ = (nt - 1);
            z_eta.reserve(dim_z_eta_0__);
            for (size_t k_0__ = 0; k_0__ < dim_z_eta_0__; ++k_0__) {
                if (jacobian__)
                    z_eta.push_back(in__.row_vector_constrain(nn,lp__));
                else
                    z_eta.push_back(in__.row_vector_constrain(nn));
            }

            local_scalar_t__ sigma_star;
            (void) sigma_star;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_star = in__.scalar_ub_constrain(3.0,lp__);
            else
                sigma_star = in__.scalar_ub_constrain(3.0);

            local_scalar_t__ k_star;
            (void) k_star;  // dummy to suppress unused var warning
            if (jacobian__)
                k_star = in__.scalar_ub_constrain(3.0,lp__);
            else
                k_star = in__.scalar_ub_constrain(3.0);


            // transformed parameters
            current_statement_begin__ = 105;
            local_scalar_t__ amplitude;
            (void) amplitude;  // dummy to suppress unused var warning

            stan::math::initialize(amplitude, DUMMY_VAR__);
            stan::math::fill(amplitude,DUMMY_VAR__);
            stan::math::assign(amplitude,(amplitude_mu * stan::math::exp((amplitude_zscore * amplitude_star))));
            current_statement_begin__ = 106;
            local_scalar_t__ epsilon;
            (void) epsilon;  // dummy to suppress unused var warning

            stan::math::initialize(epsilon, DUMMY_VAR__);
            stan::math::fill(epsilon,DUMMY_VAR__);
            stan::math::assign(epsilon,(epsilon_mu * stan::math::exp((epsilon_zscore * epsilon_star))));
            current_statement_begin__ = 107;
            local_scalar_t__ sigma;
            (void) sigma;  // dummy to suppress unused var warning

            stan::math::initialize(sigma, DUMMY_VAR__);
            stan::math::fill(sigma,DUMMY_VAR__);
            stan::math::assign(sigma,(sigma_mu * stan::math::exp((sigma_zscore * sigma_star))));
            current_statement_begin__ = 108;
            local_scalar_t__ time_scale;
            (void) time_scale;  // dummy to suppress unused var warning

            stan::math::initialize(time_scale, DUMMY_VAR__);
            stan::math::fill(time_scale,DUMMY_VAR__);
            stan::math::assign(time_scale,(time_scale_mu * stan::math::exp((time_scale_zscore * time_scale_star))));
            current_statement_begin__ = 109;
            local_scalar_t__ k;
            (void) k;  // dummy to suppress unused var warning

            stan::math::initialize(k, DUMMY_VAR__);
            stan::math::fill(k,DUMMY_VAR__);
            stan::math::assign(k,(k_mu * stan::math::exp((k_zscore * k_star))));
            current_statement_begin__ = 110;
            validate_non_negative_index("x0", "nn", nn);
            Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  x0(static_cast<Eigen::VectorXd::Index>(nn));
            (void) x0;  // dummy to suppress unused var warning

            stan::math::initialize(x0, DUMMY_VAR__);
            stan::math::fill(x0,DUMMY_VAR__);
            stan::math::assign(x0,subtract(x0_hi,elt_multiply(x0_star_mu,stan::math::exp(elt_multiply(x0_star_zscore,x0_star)))));
            current_statement_begin__ = 111;
            validate_non_negative_index("x", "nn", nn);
            validate_non_negative_index("x", "nt", nt);
            vector<Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic> > x(nt, (Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(nn))));
            stan::math::initialize(x, DUMMY_VAR__);
            stan::math::fill(x,DUMMY_VAR__);
            current_statement_begin__ = 112;
            validate_non_negative_index("z", "nn", nn);
            validate_non_negative_index("z", "nt", nt);
            vector<Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic> > z(nt, (Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(nn))));
            stan::math::initialize(z, DUMMY_VAR__);
            stan::math::fill(z,DUMMY_VAR__);
            current_statement_begin__ = 113;
            validate_non_negative_index("mu_seeg_log_power", "ns", ns);
            validate_non_negative_index("mu_seeg_log_power", "nt", nt);
            vector<Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic> > mu_seeg_log_power(nt, (Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(ns))));
            stan::math::initialize(mu_seeg_log_power, DUMMY_VAR__);
            stan::math::fill(mu_seeg_log_power,DUMMY_VAR__);


            current_statement_begin__ = 115;
            stan::math::assign(get_base1_lhs(x,1,"x",1), x_init);
            current_statement_begin__ = 116;
            stan::math::assign(get_base1_lhs(z,1,"z",1), z_init);
            current_statement_begin__ = 117;
            for (int t = 1; t <= (nt - 1); ++t) {

                current_statement_begin__ = 118;
                stan::math::assign(get_base1_lhs(x,(t + 1),"x",1), x_step(get_base1(x,t,"x",1),get_base1(z,t,"z",1),I1,(dt * time_scale),get_base1(x_eta,t,"x_eta",1),(sqrtdt * sigma), pstream__));
                current_statement_begin__ = 119;
                stan::math::assign(get_base1_lhs(z,(t + 1),"z",1), z_step(get_base1(x,t,"x",1),get_base1(z,t,"z",1),x0,multiply(k,SC),Ic,x_eq_def,(dt * time_scale),get_base1(z_eta,t,"z_eta",1),(sqrtdt * sigma),tau0, pstream__));
            }
            current_statement_begin__ = 122;
            for (int t = 1; t <= nt; ++t) {
                current_statement_begin__ = 123;
                stan::math::assign(get_base1_lhs(mu_seeg_log_power,t,"mu_seeg_log_power",1), multiply(amplitude,transpose(add(stan::math::log(multiply(gain,stan::math::exp(subtract(transpose(get_base1(x,t,"x",1)),x_eq_def)))),offset))));
            }

            // validate transformed parameters
            if (stan::math::is_uninitialized(amplitude)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: amplitude";
                throw std::runtime_error(msg__.str());
            }
            if (stan::math::is_uninitialized(epsilon)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: epsilon";
                throw std::runtime_error(msg__.str());
            }
            if (stan::math::is_uninitialized(sigma)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: sigma";
                throw std::runtime_error(msg__.str());
            }
            if (stan::math::is_uninitialized(time_scale)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: time_scale";
                throw std::runtime_error(msg__.str());
            }
            if (stan::math::is_uninitialized(k)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: k";
                throw std::runtime_error(msg__.str());
            }
            for (int i0__ = 0; i0__ < nn; ++i0__) {
                if (stan::math::is_uninitialized(x0(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: x0" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < nt; ++i0__) {
                for (int i1__ = 0; i1__ < nn; ++i1__) {
                    if (stan::math::is_uninitialized(x[i0__](i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: x" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < nt; ++i0__) {
                for (int i1__ = 0; i1__ < nn; ++i1__) {
                    if (stan::math::is_uninitialized(z[i0__](i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: z" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < nt; ++i0__) {
                for (int i1__ = 0; i1__ < ns; ++i1__) {
                    if (stan::math::is_uninitialized(mu_seeg_log_power[i0__](i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: mu_seeg_log_power" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 105;
            current_statement_begin__ = 106;
            current_statement_begin__ = 107;
            current_statement_begin__ = 108;
            current_statement_begin__ = 109;
            current_statement_begin__ = 110;
            current_statement_begin__ = 111;
            current_statement_begin__ = 112;
            current_statement_begin__ = 113;

            // model body

            current_statement_begin__ = 127;
            lp_accum__.add(normal_log<propto__>(to_row_vector(x0_star), 0, 1.0));
            current_statement_begin__ = 128;
            lp_accum__.add(normal_log<propto__>(k_star, 0, 1));
            current_statement_begin__ = 129;
            lp_accum__.add(normal_log<propto__>(x_init, x_init_mu, x_init_std));
            current_statement_begin__ = 130;
            lp_accum__.add(normal_log<propto__>(z_init, z_init_mu, z_init_std));
            current_statement_begin__ = 131;
            lp_accum__.add(normal_log<propto__>(sigma_star, 0, 1.0));
            current_statement_begin__ = 132;
            lp_accum__.add(normal_log<propto__>(time_scale_star, 0, 1.0));
            current_statement_begin__ = 134;
            lp_accum__.add(normal_log<propto__>(amplitude_star, 0.0, 1.0));
            current_statement_begin__ = 135;
            lp_accum__.add(normal_log<propto__>(offset, offset_mu, offset_std));
            current_statement_begin__ = 136;
            lp_accum__.add(normal_log<propto__>(epsilon_star, 0, 1.0));
            current_statement_begin__ = 138;
            for (int t = 1; t <= (nt - 1); ++t) {

                current_statement_begin__ = 139;
                lp_accum__.add(normal_log<propto__>(to_vector(get_base1(x_eta,t,"x_eta",1)), 0, 1));
                current_statement_begin__ = 140;
                lp_accum__.add(normal_log<propto__>(to_vector(get_base1(z_eta,t,"z_eta",1)), 0, 1));
            }
            current_statement_begin__ = 143;
            if (as_bool(logical_lt(SIMULATE,1))) {
                current_statement_begin__ = 144;
                for (int t = 1; t <= nt; ++t) {
                    current_statement_begin__ = 145;
                    lp_accum__.add(normal_log<propto__>(get_base1(seeg_log_power,t,"seeg_log_power",1), get_base1(mu_seeg_log_power,t,"mu_seeg_log_power",1), epsilon));
                }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("x0_star");
        names__.push_back("epsilon_star");
        names__.push_back("amplitude_star");
        names__.push_back("offset");
        names__.push_back("time_scale_star");
        names__.push_back("x_init");
        names__.push_back("z_init");
        names__.push_back("x_eta");
        names__.push_back("z_eta");
        names__.push_back("sigma_star");
        names__.push_back("k_star");
        names__.push_back("amplitude");
        names__.push_back("epsilon");
        names__.push_back("sigma");
        names__.push_back("time_scale");
        names__.push_back("k");
        names__.push_back("x0");
        names__.push_back("x");
        names__.push_back("z");
        names__.push_back("mu_seeg_log_power");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(nn);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nn);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nn);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((nt - 1));
        dims__.push_back(nn);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((nt - 1));
        dims__.push_back(nn);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nn);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dims__.push_back(nn);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dims__.push_back(nn);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dims__.push_back(ns);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "vep_fe_rev_09dp_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        row_vector_d x0_star = in__.row_vector_ub_constrain(3.0,nn);
        double epsilon_star = in__.scalar_ub_constrain(3.0);
        double amplitude_star = in__.scalar_lub_constrain(-(3.0),3.0);
        double offset = in__.scalar_lub_constrain(-(1.0),1.0);
        double time_scale_star = in__.scalar_lub_constrain(-(3.0),3.0);
        row_vector_d x_init = in__.row_vector_constrain(nn);
        row_vector_d z_init = in__.row_vector_constrain(nn);
        vector<row_vector_d> x_eta;
        size_t dim_x_eta_0__ = (nt - 1);
        for (size_t k_0__ = 0; k_0__ < dim_x_eta_0__; ++k_0__) {
            x_eta.push_back(in__.row_vector_constrain(nn));
        }
        vector<row_vector_d> z_eta;
        size_t dim_z_eta_0__ = (nt - 1);
        for (size_t k_0__ = 0; k_0__ < dim_z_eta_0__; ++k_0__) {
            z_eta.push_back(in__.row_vector_constrain(nn));
        }
        double sigma_star = in__.scalar_ub_constrain(3.0);
        double k_star = in__.scalar_ub_constrain(3.0);
            for (int k_0__ = 0; k_0__ < nn; ++k_0__) {
            vars__.push_back(x0_star[k_0__]);
            }
        vars__.push_back(epsilon_star);
        vars__.push_back(amplitude_star);
        vars__.push_back(offset);
        vars__.push_back(time_scale_star);
            for (int k_0__ = 0; k_0__ < nn; ++k_0__) {
            vars__.push_back(x_init[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < nn; ++k_0__) {
            vars__.push_back(z_init[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < nn; ++k_1__) {
                for (int k_0__ = 0; k_0__ < (nt - 1); ++k_0__) {
                vars__.push_back(x_eta[k_0__][k_1__]);
                }
            }
            for (int k_1__ = 0; k_1__ < nn; ++k_1__) {
                for (int k_0__ = 0; k_0__ < (nt - 1); ++k_0__) {
                vars__.push_back(z_eta[k_0__][k_1__]);
                }
            }
        vars__.push_back(sigma_star);
        vars__.push_back(k_star);

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 105;
            local_scalar_t__ amplitude;
            (void) amplitude;  // dummy to suppress unused var warning

            stan::math::initialize(amplitude, DUMMY_VAR__);
            stan::math::fill(amplitude,DUMMY_VAR__);
            stan::math::assign(amplitude,(amplitude_mu * stan::math::exp((amplitude_zscore * amplitude_star))));
            current_statement_begin__ = 106;
            local_scalar_t__ epsilon;
            (void) epsilon;  // dummy to suppress unused var warning

            stan::math::initialize(epsilon, DUMMY_VAR__);
            stan::math::fill(epsilon,DUMMY_VAR__);
            stan::math::assign(epsilon,(epsilon_mu * stan::math::exp((epsilon_zscore * epsilon_star))));
            current_statement_begin__ = 107;
            local_scalar_t__ sigma;
            (void) sigma;  // dummy to suppress unused var warning

            stan::math::initialize(sigma, DUMMY_VAR__);
            stan::math::fill(sigma,DUMMY_VAR__);
            stan::math::assign(sigma,(sigma_mu * stan::math::exp((sigma_zscore * sigma_star))));
            current_statement_begin__ = 108;
            local_scalar_t__ time_scale;
            (void) time_scale;  // dummy to suppress unused var warning

            stan::math::initialize(time_scale, DUMMY_VAR__);
            stan::math::fill(time_scale,DUMMY_VAR__);
            stan::math::assign(time_scale,(time_scale_mu * stan::math::exp((time_scale_zscore * time_scale_star))));
            current_statement_begin__ = 109;
            local_scalar_t__ k;
            (void) k;  // dummy to suppress unused var warning

            stan::math::initialize(k, DUMMY_VAR__);
            stan::math::fill(k,DUMMY_VAR__);
            stan::math::assign(k,(k_mu * stan::math::exp((k_zscore * k_star))));
            current_statement_begin__ = 110;
            validate_non_negative_index("x0", "nn", nn);
            Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  x0(static_cast<Eigen::VectorXd::Index>(nn));
            (void) x0;  // dummy to suppress unused var warning

            stan::math::initialize(x0, DUMMY_VAR__);
            stan::math::fill(x0,DUMMY_VAR__);
            stan::math::assign(x0,subtract(x0_hi,elt_multiply(x0_star_mu,stan::math::exp(elt_multiply(x0_star_zscore,x0_star)))));
            current_statement_begin__ = 111;
            validate_non_negative_index("x", "nn", nn);
            validate_non_negative_index("x", "nt", nt);
            vector<Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic> > x(nt, (Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(nn))));
            stan::math::initialize(x, DUMMY_VAR__);
            stan::math::fill(x,DUMMY_VAR__);
            current_statement_begin__ = 112;
            validate_non_negative_index("z", "nn", nn);
            validate_non_negative_index("z", "nt", nt);
            vector<Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic> > z(nt, (Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(nn))));
            stan::math::initialize(z, DUMMY_VAR__);
            stan::math::fill(z,DUMMY_VAR__);
            current_statement_begin__ = 113;
            validate_non_negative_index("mu_seeg_log_power", "ns", ns);
            validate_non_negative_index("mu_seeg_log_power", "nt", nt);
            vector<Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic> > mu_seeg_log_power(nt, (Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(ns))));
            stan::math::initialize(mu_seeg_log_power, DUMMY_VAR__);
            stan::math::fill(mu_seeg_log_power,DUMMY_VAR__);


            current_statement_begin__ = 115;
            stan::math::assign(get_base1_lhs(x,1,"x",1), x_init);
            current_statement_begin__ = 116;
            stan::math::assign(get_base1_lhs(z,1,"z",1), z_init);
            current_statement_begin__ = 117;
            for (int t = 1; t <= (nt - 1); ++t) {

                current_statement_begin__ = 118;
                stan::math::assign(get_base1_lhs(x,(t + 1),"x",1), x_step(get_base1(x,t,"x",1),get_base1(z,t,"z",1),I1,(dt * time_scale),get_base1(x_eta,t,"x_eta",1),(sqrtdt * sigma), pstream__));
                current_statement_begin__ = 119;
                stan::math::assign(get_base1_lhs(z,(t + 1),"z",1), z_step(get_base1(x,t,"x",1),get_base1(z,t,"z",1),x0,multiply(k,SC),Ic,x_eq_def,(dt * time_scale),get_base1(z_eta,t,"z_eta",1),(sqrtdt * sigma),tau0, pstream__));
            }
            current_statement_begin__ = 122;
            for (int t = 1; t <= nt; ++t) {
                current_statement_begin__ = 123;
                stan::math::assign(get_base1_lhs(mu_seeg_log_power,t,"mu_seeg_log_power",1), multiply(amplitude,transpose(add(stan::math::log(multiply(gain,stan::math::exp(subtract(transpose(get_base1(x,t,"x",1)),x_eq_def)))),offset))));
            }

            // validate transformed parameters
            current_statement_begin__ = 105;
            current_statement_begin__ = 106;
            current_statement_begin__ = 107;
            current_statement_begin__ = 108;
            current_statement_begin__ = 109;
            current_statement_begin__ = 110;
            current_statement_begin__ = 111;
            current_statement_begin__ = 112;
            current_statement_begin__ = 113;

            // write transformed parameters
            if (include_tparams__) {
        vars__.push_back(amplitude);
        vars__.push_back(epsilon);
        vars__.push_back(sigma);
        vars__.push_back(time_scale);
        vars__.push_back(k);
            for (int k_0__ = 0; k_0__ < nn; ++k_0__) {
            vars__.push_back(x0[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < nn; ++k_1__) {
                for (int k_0__ = 0; k_0__ < nt; ++k_0__) {
                vars__.push_back(x[k_0__][k_1__]);
                }
            }
            for (int k_1__ = 0; k_1__ < nn; ++k_1__) {
                for (int k_0__ = 0; k_0__ < nt; ++k_0__) {
                vars__.push_back(z[k_0__][k_1__]);
                }
            }
            for (int k_1__ = 0; k_1__ < ns; ++k_1__) {
                for (int k_0__ = 0; k_0__ < nt; ++k_0__) {
                vars__.push_back(mu_seeg_log_power[k_0__][k_1__]);
                }
            }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities



            // validate generated quantities

            // write generated quantities
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "vep_fe_rev_09dp_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= nn; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "x0_star" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "epsilon_star";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "amplitude_star";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "offset";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "time_scale_star";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= nn; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "x_init" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= nn; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_init" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= nn; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (nt - 1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "x_eta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= nn; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (nt - 1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z_eta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_star";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "k_star";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "amplitude";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "epsilon";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "time_scale";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "k";
            param_names__.push_back(param_name_stream__.str());
            for (int k_0__ = 1; k_0__ <= nn; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "x0" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_1__ = 1; k_1__ <= nn; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "x" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= nn; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "z" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= ns; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "mu_seeg_log_power" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }


        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= nn; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "x0_star" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "epsilon_star";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "amplitude_star";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "offset";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "time_scale_star";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= nn; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "x_init" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= nn; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_init" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= nn; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (nt - 1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "x_eta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= nn; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (nt - 1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z_eta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_star";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "k_star";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "amplitude";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "epsilon";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "time_scale";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "k";
            param_names__.push_back(param_name_stream__.str());
            for (int k_0__ = 1; k_0__ <= nn; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "x0" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_1__ = 1; k_1__ <= nn; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "x" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= nn; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "z" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= ns; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "mu_seeg_log_power" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }


        if (!include_gqs__) return;
    }

}; // model

}

typedef vep_fe_rev_09dp_model_namespace::vep_fe_rev_09dp_model stan_model;

